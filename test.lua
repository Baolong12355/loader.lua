-- Auto Crate Farm Script
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- C·∫•u h√¨nh
local TELEPORT_SPEED = 50 -- T·ªëc ƒë·ªô teleport
local CHECK_DELAY = 0.1 -- Delay gi·ªØa c√°c l·∫ßn check
local FARMING_ENABLED = true

-- C√°c v·ªã tr√≠ spawn crate
local SPAWN_POSITIONS = {
    Vector3.new(-746.103271484375, 86.75001525878906, -620.12060546875),
    Vector3.new(-353.05078125, 132.3436279296875, 50.36767578125),
    Vector3.new(-70.82891845703125, 81.39054107666016, 834.0664672851562)
}

-- Bi·∫øn tr·∫°ng th√°i
local isWaitingForSpawn = false
local lastChatMessage = ""

print("üöÄ Auto Crate Farm Script ƒë√£ kh·ªüi ƒë·ªông!")

-- H√†m teleport v·ªõi animation m∆∞·ª£t
local function teleportToPosition(position)
    if not Character or not HumanoidRootPart then return end
    
    local tweenInfo = TweenInfo.new(
        (HumanoidRootPart.Position - position).Magnitude / TELEPORT_SPEED,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.InOut
    )
    
    local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
    tween:Play()
    tween.Completed:Wait()
    wait(CHECK_DELAY)
end

-- H√†m g·ªçi remote TurnInCrate
local function turnInCrate()
    local success, result = pcall(function()
        local args = {
            [1] = "TurnInCrate"
        }
        
        return ReplicatedStorage:WaitForChild("ReplicatedModules")
            :WaitForChild("KnitPackage")
            :WaitForChild("Knit")
            :WaitForChild("Services")
            :WaitForChild("DialogueService")
            :WaitForChild("RF")
            :WaitForChild("CheckRequirement"):InvokeServer(unpack(args))
    end)
    
    if success then
        print("‚úÖ ƒê√£ g·ªçi TurnInCrate th√†nh c√¥ng!")
    else
        warn("‚ùå L·ªói khi g·ªçi TurnInCrate: " .. tostring(result))
    end
end

-- H√†m ki·ªÉm tra v√† t∆∞∆°ng t√°c v·ªõi crate
local function checkAndInteractWithCrate()
    local itemSpawns = workspace:FindFirstChild("ItemSpawns")
    if not itemSpawns then return false end
    
    local labCrate = itemSpawns:FindFirstChild("LabCrate")
    if not labCrate then return false end
    
    local children = labCrate:GetChildren()
    if #children < 2 then return false end
    
    local crateChild = children[2]
    local crate = crateChild:FindFirstChild("Crate")
    if not crate then return false end
    
    local proximityAttachment = crate:FindFirstChild("ProximityAttachment")
    if not proximityAttachment then return false end
    
    local interaction = proximityAttachment:FindFirstChild("Interaction")
    if not interaction then return false end
    
    -- Ki·ªÉm tra n·∫øu interaction enabled
    if interaction.Enabled then
        print("üéØ T√¨m th·∫•y crate c√≥ th·ªÉ t∆∞∆°ng t√°c!")
        
        -- K√≠ch ho·∫°t proximity cho ƒë·∫øn khi disabled
        while interaction.Enabled and FARMING_ENABLED do
            -- Trigger proximity prompt
            if interaction:IsA("ProximityPrompt") then
                fireproximityprompt(interaction)
            end
            wait(0.1)
        end
        
        print("üì¶ ƒê√£ t∆∞∆°ng t√°c xong v·ªõi crate!")
        
        -- G·ªçi remote sau khi t∆∞∆°ng t√°c
        wait(0.5) -- ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi g·ªçi remote
        turnInCrate()
        
        return true
    end
    
    return false
end

-- H√†m theo d√µi chat ƒë·ªÉ ph√°t hi·ªán th√¥ng b√°o spawn
local function setupChatMonitoring()
    -- T·∫°o file log chat
    local LogFile = "CrateFarm_ChatLog_" .. os.time() .. ".txt"
    if writefile then
        writefile(LogFile, "=== Auto Crate Farm Chat Monitor ===\n")
    end
    
    local function logChat(text)
        lastChatMessage = text
        if writefile then
            appendfile(LogFile, "[" .. os.date() .. "] " .. text .. "\n")
        end
        print("üí¨ Chat: " .. text)
        
        -- Ki·ªÉm tra th√¥ng b√°o spawn crate
        if string.find(text, "lost equipment crate") and string.find(text, "has been reported!") then
            print("üö® Ph√°t hi·ªán crate m·ªõi spawn!")
            isWaitingForSpawn = false
        end
        
        -- Ki·ªÉm tra th√¥ng b√°o crate despawn
        if string.find(text, "lost equipment crate") and (string.find(text, "despawned") or string.find(text, "turned in")) then
            print("‚è∞ Crate ƒë√£ despawn ho·∫∑c ƒë∆∞·ª£c turn in")
            isWaitingForSpawn = true
        end
    end
    
    -- Theo d√µi chat GUI
    local function scanChatLabels(container)
        if not container then return end
        
        -- Theo d√µi TextLabel m·ªõi ƒë∆∞·ª£c th√™m
        container.DescendantAdded:Connect(function(desc)
            if desc:IsA("TextLabel") and desc.Text and #desc.Text > 0 then
                logChat("[GUI Chat] " .. desc.Text)
            end
        end)
        
        -- Ki·ªÉm tra TextLabel hi·ªán c√≥
        for _, desc in pairs(container:GetDescendants()) do
            if desc:IsA("TextLabel") and desc.Text and #desc.Text > 0 then
                logChat("[GUI Chat] " .. desc.Text)
            end
        end
    end
    
    -- Theo d√µi c√°c GUI container c√≥ th·ªÉ ch·ª©a chat
    local guiContainers = {
        LocalPlayer:WaitForChild("PlayerGui"),
        game:GetService("CoreGui")
    }
    
    for _, gui in ipairs(guiContainers) do
        scanChatLabels(gui)
        
        -- Theo d√µi GUI m·ªõi ƒë∆∞·ª£c t·∫°o
        gui.ChildAdded:Connect(function(child)
            wait(0.1) -- ƒê·ª£i GUI load xong
            scanChatLabels(child)
        end)
    end
end

-- V√≤ng l·∫∑p ch√≠nh
local function mainLoop()
    -- D·ªãch chuy·ªÉn m·ªôt l·∫ßn ƒë·∫ßu ti√™n
    print("üéØ B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c v·ªã tr√≠ spawn...")
    
    while FARMING_ENABLED do
        if not isWaitingForSpawn then
            local foundCrate = false
            
            -- Ki·ªÉm tra t·ª´ng v·ªã tr√≠ spawn
            for i, position in ipairs(SPAWN_POSITIONS) do
                if not FARMING_ENABLED then break end
                
                print("üîç Ki·ªÉm tra v·ªã tr√≠ " .. i .. ": " .. tostring(position))
                teleportToPosition(position)
                
                -- Ki·ªÉm tra crate t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
                if checkAndInteractWithCrate() then
                    foundCrate = true
                    break
                end
            end
            
            -- N·∫øu kh√¥ng t√¨m th·∫•y crate n√†o, chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªù
            if not foundCrate then
                print("‚åõ Kh√¥ng t√¨m th·∫•y crate kh·∫£ d·ª•ng, chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªù...")
                isWaitingForSpawn = true
            end
        else
            print("‚è≥ ƒêang ch·ªù th√¥ng b√°o spawn crate m·ªõi...")
            wait(1) -- Ch·ªù l√¢u h∆°n khi kh√¥ng c√≥ crate
        end
        
        wait(CHECK_DELAY)
    end
end

-- Kh·ªüi ƒë·ªông script
setupChatMonitoring()

-- ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ chat system load
wait(2)

-- B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh
spawn(function()
    mainLoop()
end)

-- L·ªánh ƒëi·ªÅu khi·ªÉn
local function stopFarming()
    FARMING_ENABLED = false
    print("üõë ƒê√£ d·ª´ng Auto Crate Farm!")
end

local function startFarming()
    FARMING_ENABLED = true
    print("‚ñ∂Ô∏è ƒê√£ kh·ªüi ƒë·ªông l·∫°i Auto Crate Farm!")
    spawn(function()
        mainLoop()
    end)
end

-- Export functions ƒë·ªÉ c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn t·ª´ console
_G.StopCrateFarm = stopFarming
_G.StartCrateFarm = startFarming

print("üìã L·ªánh ƒëi·ªÅu khi·ªÉn:")
print("   _G.StopCrateFarm() - D·ª´ng farm")
print("   _G.StartCrateFarm() - B·∫Øt ƒë·∫ßu farm")
print("üéÆ Script ƒë√£ s·∫µn s√†ng!")