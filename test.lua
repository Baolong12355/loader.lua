local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local PlayerScripts = player:WaitForChild("PlayerScripts")

-- File output path
local outJson = "tdx/macros/moving_skills_only.json"

-- X√≥a file c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
if isfile and isfile(outJson) and delfile then
    local ok, err = pcall(delfile, outJson)
    if not ok then
        warn("Kh√¥ng th·ªÉ x√≥a file c≈©: " .. tostring(err))
    end
end

local recordedSkills = {} -- B·∫£ng l∆∞u tr·ªØ moving skills

-- L·∫•y TowerClass m·ªôt c√°ch an to√†n
local TowerClass
pcall(function()
    local client = PlayerScripts:WaitForChild("Client")
    local gameClass = client:WaitForChild("GameClass")
    local towerModule = gameClass:WaitForChild("TowerClass")
    TowerClass = require(towerModule)
end)

-- T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
if makefolder then
    pcall(makefolder, "tdx")
    pcall(makefolder, "tdx/macros")
end

--==============================================================================
--=                           H√ÄM TI·ªÜN √çCH                                     =
--==============================================================================

-- H√†m ghi file an to√†n
local function safeWriteFile(path, content)
    if writefile then
        local success, err = pcall(writefile, path, content)
        if not success then
            warn("L·ªói khi ghi file: " .. tostring(err))
        end
    end
end

-- L·∫•y th√¥ng tin wave v√† time hi·ªán t·∫°i
local function getCurrentWaveAndTime()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return nil, nil end

    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return nil, nil end
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return nil, nil end

    local wave = gameInfoBar.Wave.WaveText.Text
    local time = gameInfoBar.TimeLeft.TimeLeftText.Text
    return wave, time
end

-- L·∫•y v·ªã tr√≠ spawn c·ªßa tower
local function GetTowerSpawnPosition(tower)
    if not tower then return nil end
    
    -- Th·ª≠ l·∫•y SpawnCFrame tr∆∞·ªõc
    if tower.SpawnCFrame and typeof(tower.SpawnCFrame) == "CFrame" then
        return tower.SpawnCFrame.Position
    end
    
    -- Fallback: th·ª≠ c√°c ph∆∞∆°ng th·ª©c kh√°c
    local success, cframe = pcall(function() return tower.CFrame end)
    if success and typeof(cframe) == "CFrame" then 
        return cframe.Position 
    end

    if tower.GetPosition then
        local posSuccess, position = pcall(tower.GetPosition, tower)
        if posSuccess and typeof(position) == "Vector3" then 
            return position 
        end
    end

    if tower.Character and tower.Character:GetCharacterModel() and tower.Character:GetCharacterModel().PrimaryPart then
        return tower.Character:GetCharacterModel().PrimaryPart.Position
    end

    return nil
end

-- C·∫≠p nh·∫≠t file JSON
local function updateJsonFile()
    if not HttpService then return end
    local jsonLines = {}
    for i, entry in ipairs(recordedSkills) do
        local ok, jsonStr = pcall(HttpService.JSONEncode, HttpService, entry)
        if ok then
            if i < #recordedSkills then
                jsonStr = jsonStr .. ","
            end
            table.insert(jsonLines, jsonStr)
        end
    end
    local finalJson = "[\n" .. table.concat(jsonLines, "\n") .. "\n]"
    safeWriteFile(outJson, finalJson)
end

-- Ki·ªÉm tra xem c√≥ ph·∫£i moving skill kh√¥ng
local function isMovingSkill(towerType, skillIndex)
    -- Helicopter: skill 1, 3
    if towerType == "Helicopter" then
        return skillIndex == 1 or skillIndex == 3
    end
    
    -- Cryo Helicopter: skill 1, 3  
    if towerType == "Cryo Helicopter" then
        return skillIndex == 1 or skillIndex == 3
    end
    
    -- Jet Trooper: skill 1
    if towerType == "Jet Trooper" then
        return skillIndex == 1
    end
    
    return false
end

--==============================================================================
--=                         HOOK SYSTEM GI·ªêNG RECORDER                         =
--==============================================================================

-- H√†ng ƒë·ª£i ch·ªù x√°c nh·∫≠n cho moving skills
local pendingMovingSkills = {}
local movingSkillTimeout = 2

-- Th√™m moving skill v√†o h√†ng ƒë·ª£i ch·ªù
local function setPendingMovingSkill(hash, skillIndex, targetPos)
    table.insert(pendingMovingSkills, {
        hash = hash,
        skillIndex = skillIndex,
        targetPos = targetPos,
        created = tick()
    })
end

-- X√°c nh·∫≠n v√† ghi moving skill
local function confirmMovingSkill(hash, skillIndex, targetPos)
    -- ==== ƒêI·ªÄU KI·ªÜN NGƒÇN LOG H√ÄNH ƒê·ªòNG KHI REBUILD ====
    if _G and _G.TDX_REBUILD_RUNNING then
        return
    end
    -- ==================================================
    
    if not TowerClass then return end
    
    local towers = TowerClass.GetTowers()
    if not towers or not towers[hash] then return end
    
    local tower = towers[hash]
    local towerType = tower.Type
    
    -- Ki·ªÉm tra xem c√≥ ph·∫£i moving skill kh√¥ng
    if not isMovingSkill(towerType, skillIndex) then return end
    
    local spawnPos = GetTowerSpawnPosition(tower)
    if not spawnPos then return end
    
    local currentWave, currentTime = getCurrentWaveAndTime()
    
    local skillRecord = {
        x = spawnPos.X, -- v·ªã tr√≠ tower (tower moving position)
        skill_index = skillIndex,
        pos = string.format("%.6f, %.6f, %.6f", targetPos.X, targetPos.Y, targetPos.Z), -- v·ªã tr√≠ ƒë√≠ch (target location)
        wave = currentWave,
        time = currentTime
    }
    
    table.insert(recordedSkills, skillRecord)
    updateJsonFile()
    
    print(string.format("[Moving Skill] %s (tower x=%.1f) skill %d -> target pos(%.1f, %.1f, %.1f) | Wave: %s Time: %s", 
        towerType, spawnPos.X, skillIndex, targetPos.X, targetPos.Y, targetPos.Z, currentWave or "?", currentTime or "?"))
end

-- X·ª≠ l√Ω remote calls (gi·ªëng nh∆∞ trong recorder ch√≠nh)
local function handleRemote(name, args)
    -- ==== ƒêI·ªÄU KI·ªÜN NGƒÇN LOG H√ÄNH ƒê·ªòNG KHI REBUILD ====
    if _G and _G.TDX_REBUILD_RUNNING then
        return
    end
    -- ==================================================

    if name == "TowerUseAbilityRequest" then
        local hash, skillIndex, targetPos = args[1], args[2], args[3]
        if typeof(hash) == "number" and typeof(skillIndex) == "number" and typeof(targetPos) == "Vector3" then
            -- Th√™m v√†o pending queue
            setPendingMovingSkill(hash, skillIndex, targetPos)
            -- Confirm ngay l·∫≠p t·ª©c (kh√¥ng c·∫ßn ch·ªù event nh∆∞ upgrade)
            confirmMovingSkill(hash, skillIndex, targetPos)
        end
    end
end

-- Hook c√°c h√†m remote (gi·ªëng nh∆∞ recorder ch√≠nh)
local function setupHooks()
    if not hookfunction or not hookmetamethod or not checkcaller then
        warn("Executor kh√¥ng h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß c√°c h√†m hook c·∫ßn thi·∫øt.")
        return
    end

    -- Hook FireServer
    local oldFireServer = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
        handleRemote(self.Name, {...})
        return oldFireServer(self, ...)
    end)

    -- Hook InvokeServer (TowerUseAbilityRequest s·ª≠ d·ª•ng InvokeServer)
    local oldInvokeServer = hookfunction(Instance.new("RemoteFunction").InvokeServer, function(self, ...)
        handleRemote(self.Name, {...})
        return oldInvokeServer(self, ...)
    end)

    -- Hook namecall
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        if checkcaller() then return oldNamecall(self, ...) end
        local method = getnamecallmethod()
        if method == "FireServer" or method == "InvokeServer" then
            handleRemote(self.Name, {...})
        end
        return oldNamecall(self, ...)
    end)
end

--==============================================================================
--=                         V√íNG L·∫∂P D·ªåN D·∫∏P                                   =
--==============================================================================

-- V√≤ng l·∫∑p d·ªçn d·∫πp h√†ng ƒë·ª£i ch·ªù (gi·ªëng nh∆∞ recorder ch√≠nh)
task.spawn(function()
    while task.wait(0.5) do
        local now = tick()
        for i = #pendingMovingSkills, 1, -1 do
            if now - pendingMovingSkills[i].created > movingSkillTimeout then
                warn("‚ùå Moving skill timeout: " .. tostring(pendingMovingSkills[i].hash) .. " skill " .. tostring(pendingMovingSkills[i].skillIndex))
                table.remove(pendingMovingSkills, i)
            end
        end
    end
end)

--==============================================================================
--=                         KH·ªûI T·∫†O                                           =
--==============================================================================

setupHooks()

print("‚úÖ TDX Moving Skills Hook Only ƒë√£ ho·∫°t ƒë·ªông!")
print("üéØ Ch·ªâ hook: Helicopter (skill 1,3), Cryo Helicopter (skill 1,3), Jet Trooper (skill 1)")
print("üìç Format: x=tower position, pos=target location")
print("üîß Hook TowerUseAbilityRequest v·ªõi InvokeServer")
print("üìÅ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ghi v√†o: " .. outJson)