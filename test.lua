local replStorage = game:GetService("ReplicatedStorage")
local remotes = replStorage:WaitForChild("Remotes")
local TowerUseAbilityRequest = remotes:WaitForChild("TowerUseAbilityRequest")
local localPlayer = game:GetService("Players").LocalPlayer

-- Cache l∆∞u tr·ªØ skill data
local skillCache = {}
local cacheIndex = 1

-- Moving skills c·∫ßn track (Helio skill 1,3 v√† Cryo Helio, Jet Trooper skill 1)
local MOVING_SKILLS = {
    [1] = "Helio Skill 1",
    [3] = "Helio Skill 3", 
    [1] = "Cryo Helio Skill 1",
    [1] = "Jet Trooper Skill 1"
}

-- H√†m l·∫•y wave hi·ªán t·∫°i
local function getCurrentWave()
    -- Logic l·∫•y wave t·ª´ game (c·∫ßn adapt theo game structure)
    local gameState = replStorage:FindFirstChild("GameState")
    if gameState and gameState:FindFirstChild("Wave") then
        return gameState.Wave.Value
    end
    return 1
end

-- H√†m l·∫•y th·ªùi gian game
local function getGameTime()
    return tick()
end

-- H√†m ki·ªÉm tra skill c√≥ ph·∫£i moving skill kh√¥ng
local function isMovingSkill(skillIndex, towerHash)
    -- Logic ki·ªÉm tra d·ª±a tr√™n tower type v√† skill index
    return MOVING_SKILLS[skillIndex] ~= nil
end

-- Bi·∫øn l∆∞u h√†m g·ªëc
local originalInvokeServer

-- Hook function ch√≠nh
local function setupMovingSkillHook()
    -- Hook namecall ƒë·ªÉ b·∫Øt TowerUseAbilityRequest
    local originalNamecall
    originalNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        
        if method == "InvokeServer" and self == TowerUseAbilityRequest then
            local args = {...}
            local towerHash = args[1]
            local skillIndex = args[2] 
            local targetPos = args[3]
            
            -- Ki·ªÉm tra n·∫øu l√† moving skill
            if isMovingSkill(skillIndex, towerHash) then
                -- L∆∞u v√†o cache tr∆∞·ªõc
                local skillData = {
                    towermoving = towerHash,
                    skillIndex = skillIndex,
                    location = targetPos,
                    wave = getCurrentWave(),
                    time = getGameTime(),
                    timestamp = os.time()
                }
                
                skillCache[cacheIndex] = skillData
                cacheIndex = cacheIndex + 1
                
                -- In th√¥ng tin record
                print(string.format("üéØ [Moving Skill Recorded] Tower: %d | Skill: %d | Pos: %s | Wave: %d | Time: %.2f",
                    towerHash, skillIndex, tostring(targetPos), skillData.wave, skillData.time))
                
                -- G·ªçi h√†m x·ª≠ l√Ω cache sau khi l∆∞u
                spawn(function()
                    wait(0.1) -- Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o data ƒë√£ l∆∞u
                    processSkillCache()
                end)
            end
            
            -- Return k·∫øt qu·∫£ t·ª´ server
            local result = originalNamecall(self, ...)
            return result
        end
        
        return originalNamecall(self, ...)
    end)
    
    print("‚úÖ Moving Skill Hook v·ªõi Recorder ƒë√£ k√≠ch ho·∫°t")
end

-- H√†m x·ª≠ l√Ω cache ƒë√£ l∆∞u
function processSkillCache()
    if #skillCache == 0 then return end
    
    print(string.format("üìä [Processing Cache] C√≥ %d skills trong cache", #skillCache))
    
    for i, skillData in pairs(skillCache) do
        -- Format output nh∆∞ y√™u c·∫ßu
        print(string.format([[
üéÆ [Skill Record #%d]
towermoving = %d
skill index = %d  
location = %s
wave = %d
time = %.2f
        ]], i, skillData.towermoving, skillData.skillIndex, 
            tostring(skillData.location), skillData.wave, skillData.time))
        
        -- C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω kh√°c ·ªü ƒë√¢y
        -- V√≠ d·ª•: ghi v√†o file, g·ª≠i l√™n server, etc.
    end
end

-- H√†m replay skill t·ª´ cache
function replaySkillFromCache(index)
    if not skillCache[index] then
        print("‚ùå Kh√¥ng t√¨m th·∫•y skill data t·∫°i index: " .. tostring(index))
        return false
    end
    
    local skillData = skillCache[index]
    local args = {
        skillData.towermoving,
        skillData.skillIndex,
        skillData.location
    }
    
    print(string.format("üîÑ [Replaying Skill] Tower: %d | Skill: %d | Pos: %s", 
        args[1], args[2], tostring(args[3])))
    
    -- Execute skill
    local success, result = pcall(function()
        return TowerUseAbilityRequest:InvokeServer(unpack(args))
    end)
    
    if success then
        print("‚úÖ Skill replay th√†nh c√¥ng")
        return result
    else
        print("‚ùå Skill replay th·∫•t b·∫°i: " .. tostring(result))
        return false
    end
end

-- H√†m export cache th√†nh script format
function exportCacheAsScript()
    if #skillCache == 0 then
        print("üìù Cache tr·ªëng - kh√¥ng c√≥ g√¨ ƒë·ªÉ export")
        return
    end
    
    print("üìù [Exporting Cache as Script Format]")
    print("-- Generated Moving Skills Script --")
    
    for i, skillData in pairs(skillCache) do
        print(string.format([[
-- Skill Record #%d (Wave: %d, Time: %.2f)
local args = {
    %d, -- tower hash
    %d, -- skill index  
    Vector3.new(%.6f, %.6f, %.6f) -- target position
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("TowerUseAbilityRequest"):InvokeServer(unpack(args))
wait(0.1)
        ]], i, skillData.wave, skillData.time,
            skillData.towermoving, skillData.skillIndex,
            skillData.location.X, skillData.location.Y, skillData.location.Z))
    end
end

-- Utility functions
function clearCache()
    skillCache = {}
    cacheIndex = 1
    print("üóëÔ∏è Cache ƒë√£ ƒë∆∞·ª£c x√≥a")
end

function getCacheSize()
    return #skillCache
end

function printCacheStats()
    print(string.format("üìà [Cache Stats] Size: %d | Last Index: %d", #skillCache, cacheIndex - 1))
end

-- Kh·ªüi t·∫°o hook
setupMovingSkillHook()

-- Export c√°c function ƒë·ªÉ s·ª≠ d·ª•ng
_G.SkillRecorder = {
    processCache = processSkillCache,
    replaySkill = replaySkillFromCache,
    exportScript = exportCacheAsScript,
    clearCache = clearCache,
    getCacheSize = getCacheSize,
    printStats = printCacheStats,
    getCache = function() return skillCache end
}

print("üöÄ Moving Skill Recorder kh·ªüi t·∫°o ho√†n t·∫•t!")
print("üìã S·ª≠ d·ª•ng: _G.SkillRecorder.exportScript() ƒë·ªÉ export cache")
print("üîÑ S·ª≠ d·ª•ng: _G.SkillRecorder.replaySkill(index) ƒë·ªÉ replay skill")