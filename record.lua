-- Tower Defense Macro Recorder (Fixed Version)
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")

local player = Players.LocalPlayer
local macroData = {}
local recording = false

-- Ki·ªÉm tra v√† l·∫•y c·∫•u h√¨nh t·ª´ getgenv()
if not getgenv().TDX_Config then
    getgenv().TDX_Config = {}
end
local config = getgenv().TDX_Config
local macroName = config["Macro Name"] or "macro_"..os.time()

-- K·∫øt n·ªëi c√°c RemoteEvent v·ªõi x·ª≠ l√Ω l·ªói
local function GetRemote(name)
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then
        warn("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Remotes")
        return nil
    end
    return remotes:FindFirstChild(name)
end

local PlaceTowerRemote = GetRemote("PlaceTower")
local UpgradeRemote = GetRemote("TowerUpgradeRequest")
local TargetRemote = GetRemote("ChangeQueryType")
local SellRemote = GetRemote("SellTower")

if not (PlaceTowerRemote and UpgradeRemote and TargetRemote and SellRemote) then
    warn("Kh√¥ng t√¨m th·∫•y m·ªôt ho·∫∑c nhi·ªÅu RemoteEvents c·∫ßn thi·∫øt")
    return
end

-- H√†m l∆∞u file v·ªõi ki·ªÉm tra th∆∞ m·ª•c
local function SaveMacro()
    if not recording then return end
    recording = false
    
    -- ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    if not makefolder then
        warn("H√†m makefolder kh√¥ng kh·∫£ d·ª•ng")
        return
    end
    
    if not writefile then
        warn("H√†m writefile kh√¥ng kh·∫£ d·ª•ng")
        return
    end
    
    if not isfolder then
        warn("H√†m isfolder kh√¥ng kh·∫£ d·ª•ng")
        return
    end
    
    if not isfolder("tdx/macros") then
        pcall(function()
            makefolder("tdx")
            makefolder("tdx/macros")
        end)
    end
    
    -- T·∫°o t√™n file (ƒë·∫£m b·∫£o c√≥ ƒëu√¥i .json)
    local fileName = macroName
    if not fileName:match("%.json$") then
        fileName = fileName..".json"
    end
    local macroPath = "tdx/macros/"..fileName
    
    -- L∆∞u file v·ªõi x·ª≠ l√Ω l·ªói
    local success, err = pcall(function()
        writefile(macroPath, HttpService:JSONEncode(macroData))
    end)
    
    if success then
        print("üíæ ƒê√£ l∆∞u macro v√†o:", macroPath)
        print("T·ªïng s·ªë h√†nh ƒë·ªông ƒë√£ ghi:", #macroData)
    else
        warn("L·ªói khi l∆∞u macro:", err)
    end
end

-- B·∫Øt ƒë·∫ßu ghi macro v·ªõi x·ª≠ l√Ω l·ªói
local function StartRecording()
    macroData = {}
    recording = true
    print("üî¥ ƒê√£ b·∫Øt ƒë·∫ßu ghi macro... (T√™n macro: "..macroName..")")
    print("üì¢ C√°ch d·ª´ng ghi:")
    print("1. G√µ 'stop' trong chat")
    print("2. Tho√°t game")
    print("3. G·ªçi StopMacroRecording() t·ª´ console")
    
    -- Ki·ªÉm tra leaderstats tr∆∞·ªõc khi s·ª≠ d·ª•ng
    if not player:FindFirstChild("leaderstats") or not player.leaderstats:FindFirstChild("Cash") then
        warn("Kh√¥ng t√¨m th·∫•y leaderstats/Cash")
        return
    end

    -- K·∫øt n·ªëi s·ª± ki·ªán ƒë·∫∑t th√°p v·ªõi x·ª≠ l√Ω nil
    local placeConnection
    if PlaceTowerRemote then
        placeConnection = PlaceTowerRemote.OnClientEvent:Connect(function(time, towerType, position, rotation)
            if not recording then return end
            
            local entry = {
                TowerPlaceCost = player.leaderstats.Cash.Value,
                TowerPlaced = towerType,
                TowerVector = string.format("%.15g, %.15g, %.15g", position.X, position.Y, position.Z),
                Rotation = rotation,
                TowerA1 = tostring(time)
            }
            
            table.insert(macroData, entry)
            print("üìù ƒê√£ ghi: ƒê·∫∑t th√°p "..towerType)
        end)
    else
        warn("PlaceTowerRemote kh√¥ng t·ªìn t·∫°i")
    end
    
    -- K·∫øt n·ªëi s·ª± ki·ªán n√¢ng c·∫•p th√°p
    local upgradeConnection
    if UpgradeRemote then
        upgradeConnection = UpgradeRemote.OnClientEvent:Connect(function(hash, path, _)
            if not recording then return end
            
            local entry = {
                UpgradeCost = player.leaderstats.Cash.Value,
                UpgradePath = path,
                TowerUpgraded = tostring(hash) -- S·ª≠ d·ª•ng hash tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ TowerClass
            }
            
            table.insert(macroData, entry)
            print("üìù ƒê√£ ghi: N√¢ng c·∫•p th√°p")
        end)
    else
        warn("UpgradeRemote kh√¥ng t·ªìn t·∫°i")
    end
    
    -- K·∫øt n·ªëi s·ª± ki·ªán chat
    local chatConnection
    if TextChatService then
        chatConnection = TextChatService.OnIncomingMessage:Connect(function(message)
            if not recording then return end
            if message.TextSource and message.TextSource.UserId == player.UserId then
                if string.lower(message.Text) == "stop" then
                    SaveMacro()
                    print("‚èπÔ∏è ƒê√£ d·ª´ng ghi macro theo y√™u c·∫ßu t·ª´ chat")
                end
            end
        end)
    end
    
    -- K·∫øt n·ªëi s·ª± ki·ªán tho√°t game
    local leavingConnection = game:GetService("Players").PlayerRemoving:Connect(function(leavingPlayer)
        if leavingPlayer == player and recording then
            SaveMacro()
            print("‚èπÔ∏è ƒê√£ d·ª´ng ghi macro do ng∆∞·ªùi ch∆°i tho√°t game")
        end
    end)
    
    -- L∆∞u h√†m d·ª´ng v√†o global
    getgenv().StopMacroRecording = function()
        SaveMacro()
        if placeConnection then placeConnection:Disconnect() end
        if upgradeConnection then upgradeConnection:Disconnect() end
        if chatConnection then chatConnection:Disconnect() end
        if leavingConnection then leavingConnection:Disconnect() end
        print("‚èπÔ∏è ƒê√£ d·ª´ng ghi macro theo y√™u c·∫ßu th·ªß c√¥ng")
    end
end

-- T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu ghi n·∫øu ·ªü ch·∫ø ƒë·ªô record
if type(getgenv().TDX_Config["Macros"]) == "string" and getgenv().TDX_Config["Macros"] == "record" then
    local success, err = pcall(StartRecording)
    if not success then
        warn("L·ªói khi b·∫Øt ƒë·∫ßu ghi macro:", err)
    end
else
    print("‚è© Macro Recorder ƒë√£ t·∫£i (Kh√¥ng t·ª± ƒë·ªông ghi v√¨ kh√¥ng ·ªü ch·∫ø ƒë·ªô record)")
end
