local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- TH√äM: Universal compatibility functions
local function getGlobalEnv()
    if getgenv then return getgenv() end
    if getfenv then return getfenv() end
    return _G
end

local globalEnv = getGlobalEnv()

--==============================================================================
--=                           H√ÄM TI·ªÜN √çCH (HELPERS)                           =
--==============================================================================

-- H√†m log th√¥ng tin skip wave vote
local function logSkipWaveVote(voteValue)
    local timestamp = os.date("[%H:%M:%S]")
    local status = voteValue and "YES" or "NO"
    print(string.format("%s üó≥Ô∏è Skip Wave Vote Cast: %s", timestamp, status))
end

-- H√†m x·ª≠ l√Ω skip wave vote
local function handleSkipWaveVote(args)
    if args and args[1] ~= nil then
        local voteValue = args[1]
        logSkipWaveVote(voteValue)
        
        -- C√≥ th·ªÉ th√™m logic kh√°c ·ªü ƒë√¢y, v√≠ d·ª•:
        -- - Ghi v√†o file log
        -- - G·ª≠i th√¥ng b√°o
        -- - C·∫≠p nh·∫≠t UI custom
        
        -- L∆∞u tr·∫°ng th√°i vote v√†o global environment n·∫øu c·∫ßn
        globalEnv.LAST_SKIP_WAVE_VOTE = {
            value = voteValue,
            timestamp = tick(),
            player = player.Name
        }
    end
end

--==============================================================================
--=                      X·ª¨ L√ù S·ª∞ KI·ªÜN & HOOKS                                 =
--==============================================================================

-- X·ª≠ l√Ω c√°c l·ªánh g·ªçi remote
local function handleRemote(name, args)
    if name == "SkipWaveVoteCast" then
        handleSkipWaveVote(args)
    end
end

-- Hook c√°c h√†m remote
local function setupHooks()
    if not hookfunction or not hookmetamethod or not checkcaller then
        warn("Executor kh√¥ng h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß c√°c h√†m hook c·∫ßn thi·∫øt.")
        return
    end

    -- Hook FireServer
    local oldFireServer = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
        if not checkcaller() then
            handleRemote(self.Name, {...})
        end
        return oldFireServer(self, ...)
    end)

    -- Hook InvokeServer (n·∫øu c·∫ßn thi·∫øt)
    local oldInvokeServer = hookfunction(Instance.new("RemoteFunction").InvokeServer, function(self, ...)
        if not checkcaller() then
            handleRemote(self.Name, {...})
        end
        return oldInvokeServer(self, ...)
    end)

    -- Hook namecall - QUAN TR·ªåNG NH·∫§T
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        if not checkcaller() then
            local method = getnamecallmethod()
            if method == "FireServer" or method == "InvokeServer" then
                handleRemote(self.Name, {...})
            end
        end
        return oldNamecall(self, ...)
    end)
end

--==============================================================================
--=                    OPTIONAL: S·ª∞ KI·ªÜN RESPONSE HANDLER                      =
--==============================================================================

-- L·∫Øng nghe response t·ª´ server (n·∫øu c√≥)
pcall(function()
    local skipWaveRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("SkipWaveVoteCast")
    
    -- N·∫øu c√≥ event response t·ª´ server
    if ReplicatedStorage.Remotes:FindFirstChild("SkipWaveVoteResponse") then
        ReplicatedStorage.Remotes.SkipWaveVoteResponse.OnClientEvent:Connect(function(data)
            local timestamp = os.date("[%H:%M:%S]")
            print(string.format("%s üìä Skip Wave Vote Result: %s", timestamp, tostring(data)))
        end)
    end
end)

--==============================================================================
--=                           KH·ªûI T·∫†O                                         =
--==============================================================================

-- Kh·ªüi t·∫°o hooks
setupHooks()

print("‚úÖ SkipWave Vote Hook ƒë√£ ho·∫°t ƒë·ªông!")
print("üó≥Ô∏è S·∫Ω log t·∫•t c·∫£ skip wave votes")

-- Th√™m h√†m ti·ªán √≠ch ƒë·ªÉ test (optional)
globalEnv.TDX_SKIP_WAVE = function(vote)
    vote = vote ~= false -- default true n·∫øu kh√¥ng truy·ªÅn g√¨
    local args = { vote }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SkipWaveVoteCast"):FireServer(unpack(args))
end

print("üí° S·ª≠ d·ª•ng: TDX_SKIP_WAVE(true) ho·∫∑c TDX_SKIP_WAVE(false) ƒë·ªÉ test")