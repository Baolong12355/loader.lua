local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local cashStat = player:WaitForChild("leaderstats"):WaitForChild("Cash")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local TowersFolder = Workspace:WaitForChild("Game"):WaitForChild("Towers")

local config = getgenv().TDX_Config or {}
local mode = config["Macros"] or "run"
local macroName = config["Macro Name"] or "y"
local macroPath = "tdx/macros/" .. macroName .. ".json"

-- üóº T√¨m tower theo index
local function findTowerByIndex(index)
    for _, tower in ipairs(TowersFolder:GetChildren()) do
        if tower.Name == tostring(index) or tower.Name:match("^"..index.."%.") then
            return tower
        end
    end
end

-- üîÑ Ki·ªÉm tra v√† n√¢ng c·∫•p path v·ªõi x√°c nh·∫≠n
local function upgradeTowerWithVerification(towerIndex, upgradePath)
    local maxRetries = 3
    local retryDelay = 0
    
    for attempt = 1, maxRetries do
        -- L·∫•y c·∫•p ƒë·ªô hi·ªán t·∫°i tr∆∞·ªõc khi n√¢ng c·∫•p
        local currentLevel = getCurrentPathLevel(towerIndex, upgradePath)
        if not currentLevel then
            warn("Kh√¥ng th·ªÉ ki·ªÉm tra c·∫•p ƒë·ªô path "..upgradePath.." c·ªßa tower "..towerIndex)
            return false
        end
        
        -- Th·ª±c hi·ªán n√¢ng c·∫•p
        Remotes.TowerUpgradeRequest:FireServer(towerIndex, upgradePath, 1)
        task.wait(retryDelay)
        
        -- Ki·ªÉm tra c·∫•p ƒë·ªô sau khi n√¢ng c·∫•p
        local newLevel = getCurrentPathLevel(towerIndex, upgradePath)
        
        if newLevel and newLevel > currentLevel then
            -- N√¢ng c·∫•p th√†nh c√¥ng
            return true
        else
            -- N√¢ng c·∫•p kh√¥ng th√†nh c√¥ng, th·ª≠ l·∫°i
            warn("Th·ª≠ l·∫°i n√¢ng c·∫•p tower "..towerIndex.." path "..upgradePath.." (l·∫ßn "..attempt..")")
            task.wait(retryDelay)
        end
    end
    
    warn("Kh√¥ng th·ªÉ n√¢ng c·∫•p tower "..towerIndex.." path "..upgradePath.." sau "..maxRetries.." l·∫ßn th·ª≠")
    return false
end

-- üìä L·∫•y c·∫•p ƒë·ªô hi·ªán t·∫°i c·ªßa path
local function getCurrentPathLevel(towerIndex, path)
    local tower = findTowerByIndex(towerIndex)
    if not tower then return nil end
    
    local success, level = pcall(function()
        return require(tower:FindFirstChildWhichIsA("ModuleScript")).LevelHandler:GetLevelOnPath(path)
    end)
    
    return success and level or nil
end

-- ‚ñ∂Ô∏è CH·∫†Y MACROS
if mode == "run" then
    if not isfile(macroPath) then
        error("‚ùå Kh√¥ng t√¨m th·∫•y file macro: " .. macroPath)
    end
    
    local success, macro = pcall(function()
        return HttpService:JSONDecode(readfile(macroPath))
    end)
    
    if not success then
        error("‚ùå L·ªói khi ƒë·ªçc file macro: " .. macro)
    end

    for _, entry in ipairs(macro) do
        if entry.TowerPlaced and entry.TowerVector and entry.TowerPlaceCost then
            -- üèóÔ∏è X·ª≠ l√Ω ƒë·∫∑t tower
            local x, y, z = entry.TowerVector:match("([^,]+), ([^,]+), ([^,]+)")
            local pos = Vector3.new(tonumber(x), tonumber(y), tonumber(z))
            local args = {
                tonumber(entry.TowerA1),
                entry.TowerPlaced,
                pos,
                tonumber(entry.Rotation) or 0
            }

            Remotes.PlaceTower:InvokeServer(unpack(args))
            task.wait(0.2)

        elseif entry.TowerIndex and entry.UpgradePath and entry.UpgradeCost then
            -- ‚¨ÜÔ∏è X·ª≠ l√Ω n√¢ng c·∫•p tower v·ªõi x√°c nh·∫≠n
            upgradeTowerWithVerification(entry.TowerIndex, entry.UpgradePath)
            task.wait(0.2)

        elseif entry.ChangeTarget and entry.TargetType then
            -- üéØ X·ª≠ l√Ω thay ƒë·ªïi m·ª•c ti√™u
            Remotes.ChangeQueryType:FireServer(entry.ChangeTarget, entry.TargetType)
            task.wait(0.2)

        elseif entry.SellTower then
            -- üí∞ X·ª≠ l√Ω b√°n tower
            Remotes.SellTower:FireServer(entry.SellTower)
            task.wait(0.2)
        end
    end

    print("‚úÖ ƒê√£ ho√†n th√†nh macro!")
else
    print("‚ÑπÔ∏è Ch·∫ø ƒë·ªô macro hi·ªán t·∫°i:", mode)
end
