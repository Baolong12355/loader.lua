local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

print("üéØ TDX SkipWave Hook - Advanced Analysis")
print("="..string.rep("=", 50))

-- Bi·∫øn ƒë·ªÉ track
local skipCount = 0
local serverResponses = {}
local bindevents = {}

-- L·∫•y wave hi·ªán t·∫°i
local function getCurrentWave()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return "Unknown" end
    
    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return "Unknown" end
    
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return "Unknown" end
    
    return gameInfoBar.Wave.WaveText.Text
end

-- L·∫•y th·ªùi gian hi·ªán t·∫°i
local function getCurrentTime()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return "Unknown" end
    
    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return "Unknown" end
    
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return "Unknown" end
    
    return gameInfoBar.TimeLeft.TimeLeftText.Text
end

-- Chuy·ªÉn ƒë·ªïi time string th√†nh number
local function convertTimeToNumber(timeStr)
    if not timeStr then return nil end
    local mins, secs = timeStr:match("(%d+):(%d+)")
    if mins and secs then
        return tonumber(mins) * 100 + tonumber(secs)
    end
    return nil
end

-- Safe function ƒë·ªÉ convert data th√†nh text
local function safeDataToText(data)
    if data == nil then
        return "nil"
    elseif type(data) == "string" then
        return string.format('"%s"', data)
    elseif type(data) == "number" then
        return tostring(data)
    elseif type(data) == "boolean" then
        return tostring(data)
    elseif type(data) == "table" then
        local parts = {}
        for i, v in ipairs(data) do
            table.insert(parts, safeDataToText(v))
        end
        -- N·∫øu kh√¥ng c√≥ array elements, th·ª≠ pairs
        if #parts == 0 then
            for k, v in pairs(data) do
                table.insert(parts, string.format("%s=%s", tostring(k), safeDataToText(v)))
            end
        end
        return string.format("{%s}", table.concat(parts, ", "))
    else
        return string.format("(%s: %s)", type(data), tostring(data))
    end
end

-- Safe function ƒë·ªÉ convert args th√†nh text
local function safeArgsToText(args)
    if not args or #args == 0 then
        return "(no args)"
    end
    
    local argTexts = {}
    for i, arg in ipairs(args) do
        table.insert(argTexts, safeDataToText(arg))
    end
    return table.concat(argTexts, ", ")
end

-- X·ª≠ l√Ω skip wave v·ªõi server response
local function handleSkipWave(method, args, serverResponse)
    skipCount = skipCount + 1
    local wave = getCurrentWave()
    local time = getCurrentTime()
    local timeNumber = convertTimeToNumber(time)
    
    print(string.format("üöÄ [%s] SKIP WAVE #%d", method, skipCount))
    print(string.format("   üìä Wave: %s | Time: %s (%s)", wave, time, timeNumber or "N/A"))
    print(string.format("   üìã Args: %s", safeArgsToText(args)))
    
    -- Hi·ªÉn th·ªã server response n·∫øu c√≥
    if serverResponse ~= nil then
        local responseText = safeDataToText(serverResponse)
        print(string.format("   üåê Server Response: %s", responseText))
        print(string.format("   üì° Response Type: %s", type(serverResponse)))
        
        -- L∆∞u response ƒë·ªÉ ph√¢n t√≠ch
        table.insert(serverResponses, {
            count = skipCount,
            wave = wave,
            time = time,
            timeNumber = timeNumber,
            args = args,
            response = serverResponse,
            responseText = responseText,
            timestamp = tick()
        })
    else
        print("   üåê Server Response: (No response - FireServer)")
    end
    
    print(string.format("   üïê Timestamp: %s", os.date("%H:%M:%S")))
    print("")
end

--==============================================================================
--=                       HOOK TDX BINDABLE EVENTS                            =
--==============================================================================

print("üîß Hooking TDX BindableEvents...")

-- T√¨m BindableHandler trong TDX_Shared
local function hookBindableEvents()
    local tdxShared = ReplicatedStorage:FindFirstChild("TDX_Shared")
    if not tdxShared then
        print("‚ùå TDX_Shared kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local common = tdxShared:FindFirstChild("Common")
    if not common then
        print("‚ùå Common folder kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local bindableHandlerModule = common:FindFirstChild("BindableHandler")
    if not bindableHandlerModule then
        print("‚ùå BindableHandler module kh√¥ng t√¨m th·∫•y")
        return
    end
    
    print("‚úÖ T√¨m th·∫•y BindableHandler module")
    
    -- Hook c√°c bindable events li√™n quan ƒë·∫øn skip wave
    local skipRelatedEvents = {
        "SkipWaveVote",
        "SkipWaveVoteCast", 
        "SkipWave",
        "VoteSkip",
        "WaveSkip",
        "CastSkipVote",
        "VoteCast"
    }
    
    for _, eventName in ipairs(skipRelatedEvents) do
        local success = pcall(function()
            local bindableHandler = require(bindableHandlerModule)
            if bindableHandler and bindableHandler.GetEvent then
                local event = bindableHandler.GetEvent(eventName)
                if event then
                    event:Connect(function(...)
                        local args = {...}
                        print(string.format("üì° BindableEvent [%s]: %s", eventName, safeArgsToText(args)))
                        
                        table.insert(serverResponses, {
                            type = "BindableEvent",
                            eventName = eventName,
                            data = args,
                            dataText = safeArgsToText(args),
                            timestamp = tick()
                        })
                    end)
                    print(string.format("‚úÖ Hooked BindableEvent: %s", eventName))
                    bindevents[eventName] = event
                end
            end
        end)
        
        if not success then
            print(string.format("‚ùå Kh√¥ng th·ªÉ hook BindableEvent: %s", eventName))
        end
    end
end

hookBindableEvents()

--==============================================================================
--=                         HOOK REMOTES                                      =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho RemoteEvents...")

-- Hook FireServer
if hookfunction then
    local success = pcall(function()
        local oldFireServer = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
            local name = self.Name:lower()
            if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                local args = {...}
                handleSkipWave("FireServer-" .. self.Name, args, nil)
            end
            
            return oldFireServer(self, ...)
        end)
        print("‚úÖ FireServer Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå FireServer Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookfunction kh√¥ng kh·∫£ d·ª•ng cho FireServer")
end

-- Hook InvokeServer  
if hookfunction then
    local success = pcall(function()
        local oldInvokeServer = hookfunction(Instance.new("RemoteFunction").InvokeServer, function(self, ...)
            local name = self.Name:lower()
            if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                local args = {...}
                local result = oldInvokeServer(self, ...)
                handleSkipWave("InvokeServer-" .. self.Name, args, result)
                return result
            end
            
            return oldInvokeServer(self, ...)
        end)
        print("‚úÖ InvokeServer Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå InvokeServer Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookfunction kh√¥ng kh·∫£ d·ª•ng cho InvokeServer")
end

-- Hook __namecall
if hookmetamethod and checkcaller then
    local success = pcall(function()
        local oldNamecall
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            if checkcaller() then return oldNamecall(self, ...) end
            
            local method = getnamecallmethod()
            
            if (method == "FireServer" or method == "InvokeServer") and self.Name then
                local name = self.Name:lower()
                if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                    local args = {...}
                    
                    if method == "InvokeServer" then
                        local result = oldNamecall(self, ...)
                        handleSkipWave("Namecall-" .. method .. "-" .. self.Name, args, result)
                        return result
                    else
                        handleSkipWave("Namecall-" .. method .. "-" .. self.Name, args, nil)
                    end
                end
            end
            
            return oldNamecall(self, ...)
        end)
        print("‚úÖ Namecall Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå Namecall Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookmetamethod ho·∫∑c checkcaller kh√¥ng kh·∫£ d·ª•ng")
end

--==============================================================================
--=                      HOOK CLIENT EVENTS                                   =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho Client Events...")
local function setupClientEventHooks()
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then
        print("‚ùå Remotes folder kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local hookedEvents = 0
    
    for _, remote in pairs(remotes:GetChildren()) do
        if remote:IsA("RemoteEvent") then
            local name = remote.Name:lower()
            if string.find(name, "skip") or 
               string.find(name, "wave") or
               string.find(name, "vote") or
               string.find(name, "cast") or
               string.find(name, "result") then
                
                local success = pcall(function()
                    remote.OnClientEvent:Connect(function(...)
                        local args = {...}
                        local argsText = safeArgsToText(args)
                        
                        print(string.format("üì° Client Event [%s]: %s", remote.Name, argsText))
                        
                        table.insert(serverResponses, {
                            type = "ClientEvent",
                            remoteName = remote.Name,
                            data = args,
                            dataText = argsText,
                            timestamp = tick()
                        })
                    end)
                    hookedEvents = hookedEvents + 1
                    print(string.format("‚úÖ ƒê√£ hook client event: %s", remote.Name))
                end)
                
                if not success then
                    print(string.format("‚ùå Kh√¥ng th·ªÉ hook event: %s", remote.Name))
                end
            end
        end
    end
    
    print(string.format("üìä ƒê√£ hook %d client events", hookedEvents))
end

setupClientEventHooks()

--==============================================================================
--=                         HOOK USERINPUTSERVICE                             =
--==============================================================================

print("üîß Hooking UserInputService...")

-- Hook input began
local function hookUserInput()
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        -- Ki·ªÉm tra ph√≠m skip wave (th∆∞·ªùng l√† Enter ho·∫∑c Space)
        if input.KeyCode == Enum.KeyCode.Return or 
           input.KeyCode == Enum.KeyCode.KeypadEnter or
           input.KeyCode == Enum.KeyCode.Space then
            
            print(string.format("‚å®Ô∏è Skip key pressed: %s", input.KeyCode.Name))
            
            -- Th·ª≠ t√¨m skip wave interface
            local playerGui = player:FindFirstChildOfClass("PlayerGui")
            if playerGui then
                local interface = playerGui:FindFirstChild("Interface")
                if interface then
                    -- T√¨m n√∫t skip wave
                    local function findSkipButton(parent)
                        for _, child in pairs(parent:GetDescendants()) do
                            if child:IsA("TextButton") or child:IsA("ImageButton") then
                                local text = child.Text or ""
                                if string.find(text:lower(), "skip") or string.find(text:lower(), "vote") then
                                    print(string.format("üéØ Found skip button: %s", child:GetFullName()))
                                    return child
                                end
                            end
                        end
                    end
                    
                    local skipButton = findSkipButton(interface)
                    if skipButton then
                        print("üñ±Ô∏è Simulating skip button click...")
                        skipButton.MouseButton1Click:Fire()
                    end
                end
            end
        end
    end)
    
    print("‚úÖ UserInputService hooks ƒë√£ thi·∫øt l·∫≠p")
end

hookUserInput()

--==============================================================================
--=                         TEST FUNCTIONS                                    =
--==============================================================================

-- Test function v·ªõi BindableEvent
_G.testSkipWave = function()
    print("")
    print("üß™ MANUAL TEST: Test BindableEvents...")
    print("="..string.rep("-", 30))
    
    -- Test v·ªõi c√°c BindableEvents ƒë√£ hook
    for eventName, event in pairs(bindevents) do
        print(string.format("üî• Testing BindableEvent: %s", eventName))
        
        local success = pcall(function()
            event:Fire(true) -- Test v·ªõi vote = true
        end)
        
        if success then
            print(string.format("   ‚úÖ %s - Fire th√†nh c√¥ng", eventName))
        else
            print(string.format("   ‚ùå %s - Fire th·∫•t b·∫°i", eventName))
        end
        
        task.wait(0.1)
    end
    
    -- Test v·ªõi remotes
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if remotes then
        for _, remote in pairs(remotes:GetChildren()) do
            local name = remote.Name:lower()
            if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                print(string.format("üî• Testing Remote: %s", remote.Name))
                
                local success = pcall(function()
                    if remote:IsA("RemoteEvent") then
                        remote:FireServer(true)
                    elseif remote:IsA("RemoteFunction") then
                        remote:InvokeServer(true)
                    end
                end)
                
                if success then
                    print(string.format("   ‚úÖ %s - G·ª≠i th√†nh c√¥ng", remote.Name))
                else
                    print(string.format("   ‚ùå %s - G·ª≠i th·∫•t b·∫°i", remote.Name))
                end
                
                task.wait(0.1)
            end
        end
    end
    
    print("‚úÖ Manual test ho√†n th√†nh!")
    print("")
end

-- Function ƒë·ªÉ xem t·∫•t c·∫£ responses ƒë√£ thu th·∫≠p
_G.showResponses = function()
    print("")
    print("üìä T·∫§T C·∫¢ RESPONSES:")
    print("="..string.rep("=", 40))
    
    if #serverResponses == 0 then
        print("‚ùå Ch∆∞a c√≥ response n√†o ƒë∆∞·ª£c ghi nh·∫≠n")
        return
    end
    
    for i, response in ipairs(serverResponses) do
        print(string.format("üì¶ Response #%d:", i))
        if response.count then
            print(string.format("   Count: %s", response.count))
            print(string.format("   Wave: %s", response.wave or "N/A"))
            print(string.format("   Time: %s", response.time or "N/A"))
            print(string.format("   Type: Skip"))
        else
            print(string.format("   Type: %s", response.type or "Unknown"))
            if response.remoteName then
                print(string.format("   Remote: %s", response.remoteName))
            elseif response.eventName then
                print(string.format("   Event: %s", response.eventName))
            end
        end
        
        if response.responseText then
            print(string.format("   Data: %s", response.responseText))
        elseif response.dataText then
            print(string.format("   Data: %s", response.dataText))
        else
            print("   Data: (No data)")
        end
        print("")
    end
end

-- Function ƒë·ªÉ clear responses
_G.clearResponses = function()
    serverResponses = {}
    skipCount = 0
    print("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ responses v√† reset counter")
end

-- Function ƒë·ªÉ force skip wave
_G.forceSkipWave = function()
    print("üî• FORCE SKIP WAVE...")
    
    -- Th·ª≠ t·∫•t c·∫£ c√°c methods c√≥ th·ªÉ
    local methods = {
        {name = "BindableEvent", func = function()
            for eventName, event in pairs(bindevents) do
                pcall(function() event:Fire(true) end)
            end
        end},
        {name = "Remote", func = function()
            local remotes = ReplicatedStorage:FindFirstChild("Remotes")
            if remotes then
                for _, remote in pairs(remotes:GetChildren()) do
                    local name = remote.Name:lower()
                    if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                        pcall(function()
                            if remote:IsA("RemoteEvent") then
                                remote:FireServer(true)
                            end
                        end)
                    end
                end
            end
        end},
        {name = "GUI Button", func = function()
            local playerGui = player:FindFirstChildOfClass("PlayerGui")
            if playerGui then
                for _, child in pairs(playerGui:GetDescendants()) do
                    if child:IsA("TextButton") and child.Text and 
                       string.find(child.Text:lower(), "skip") then
                        pcall(function() child.MouseButton1Click:Fire() end)
                    end
                end
            end
        end}
    }
    
    for _, method in ipairs(methods) do
        print(string.format("üéØ Trying method: %s", method.name))
        pcall(method.func)
        task.wait(0.1)
    end
    
    print("‚úÖ Force skip attempts completed!")
end

--==============================================================================
--=                         ANALYSIS & INFO                                   =
--==============================================================================

print("üîç Analyzing TDX Structure...")
local function analyzeTDXStructure()
    local results = {}
    
    -- Check TDX_Shared
    local tdxShared = ReplicatedStorage:FindFirstChild("TDX_Shared")
    if tdxShared then
        results.tdxShared = true
        print("‚úÖ TDX_Shared found")
        
        local common = tdxShared:FindFirstChild("Common")
        if common then
            results.common = true
            print("‚úÖ Common folder found")
            
            for _, child in pairs(common:GetChildren()) do
                if child.Name:find("Handler") then
                    print(string.format("   üì¶ Handler: %s", child.Name))
                end
            end
        end
    end
    
    -- Check Remotes
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if remotes then
        results.remotes = {}
        print("üì° Remotes found:")
        
        for _, remote in pairs(remotes:GetChildren()) do
            local name = remote.Name:lower()
            if string.find(name, "skip") or string.find(name, "wave") or string.find(name, "vote") then
                table.insert(results.remotes, {name = remote.Name, type = remote.ClassName})
                print(string.format("   üéØ %s (%s)", remote.Name, remote.ClassName))
            end
        end
    end
    
    return results
end

local analysis = analyzeTDXStructure()

print("="..string.rep("=", 50))
print("‚úÖ TDX SkipWave Hook ƒë√£ s·∫µn s√†ng!")
print("üéÆ Commands:")
print("   _G.testSkipWave() - Test t·∫•t c·∫£ methods")
print("   _G.forceSkipWave() - Force skip v·ªõi t·∫•t c·∫£ methods")
print("   _G.showResponses() - Xem t·∫•t c·∫£ responses")
print("   _G.clearResponses() - Clear data")
print("üìä Script s·∫Ω capture skip wave t·ª´ m·ªçi ngu·ªìn c√≥ th·ªÉ!")
print("‚å®Ô∏è Nh·∫•n Enter/Space ƒë·ªÉ th·ª≠ skip wave")
print("")