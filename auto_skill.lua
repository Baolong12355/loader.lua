-- üì¶ Auto-Skill PRO v·ªõi ph√¢n x·ª≠ tower th∆∞·ªùng v√† tower ƒë·ªãnh h∆∞·ªõng

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local PlayerScripts = LocalPlayer:WaitForChild("PlayerScripts")

local TowerClass = require(PlayerScripts.Client.GameClass:WaitForChild("TowerClass"))
local TowerUseAbilityRequest = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TowerUseAbilityRequest")
local useFireServer = TowerUseAbilityRequest:IsA("RemoteEvent")

-- üü® Danh s√°ch c√°c tower kh√¥ng x·ª≠ l√Ω (k·ªÉ c·∫£ tower ƒë·ªãnh h∆∞·ªõng ƒë·ªÉ tr√°nh x·ª≠ l√Ω sai)
local skipTowerTypes = {
    ["Farm"] = true,
    ["Relic"] = true,
    ["Scarecrow"] = true,
    ["Helicopter"] = true,
    ["Cryo Helicopter"] = true,
    ["Combat Drone"] = true,
    ["AA Turret"] = true,
    ["XWM Turret"] = true,
    ["Barracks"] = true,
    ["Cryo Blaster"] = true,
    ["Grenadier"] = true,
    ["Juggernaut"] = true,
    ["Machine Gunner"] = true,
    ["Zed"] = true,
    ["Troll Tower"] = true,
    ["Missile Trooper"] = true,
    ["Patrol Boat"] = true,
    ["Railgunner"] = true,
    ["Mine Layer"] = true,
    ["Sentry"] = true,
    ["Commander"] = true, -- Commander ch·ªâ x·ª≠ l√Ω skill 3 ·ªü ph·∫ßn tower ƒë·ªãnh h∆∞·ªõng
    ["Toxicnator"] = true,
    ["Ghost"] = true,
    ["Ice Breaker"] = true,
    ["Mobster"] = true,
    ["Golden Mobster"] = true,
    ["Artillery"] = true,
    ["EDJ"] = false,
    ["Accelerator"] = true,
    ["Engineer"] = true
}

-- üü• Danh s√°ch c√°c tower ƒë·ªãnh h∆∞·ªõng v√† y√™u c·∫ßu v·ªã tr√≠ enemy
local directionalTowerTypes = {
    ["Commander"] = { onlyAbilityIndex = 3 }, -- ch·ªâ d√πng skill 3 l√† ƒë·ªãnh h∆∞·ªõng
    ["Toxicnator"] = true,
    ["Ghost"] = true,
    ["Ice Breaker"] = true,
    ["Mobster"] = true,
    ["Golden Mobster"] = true,
    ["Artillery"] = true
}

-- üìå V·ªã tr√≠ k·∫ª ƒë·ªãch ƒë·∫ßu ti√™n
local EnemiesFolder = workspace:WaitForChild("Game"):WaitForChild("Enemies")

local function GetFirstEnemyPosition()
    for _, enemy in ipairs(EnemiesFolder:GetChildren()) do
        if enemy.Name ~= "Arrow" and enemy:IsA("BasePart") then
            return enemy.Position
        end
    end
    return nil
end

-- üß† ƒêi·ªÅu ki·ªán c√≥ th·ªÉ d√πng skill
local function CanUseAbility(ability)
    return ability and
        not ability.Passive and
        not ability.CustomTriggered and
        ability.CooldownRemaining <= 0 and
        not ability.Stunned and
        not ability.Disabled and
        not ability.Converted and
        ability:CanUse(true)
end

-- ‚úÖ Ki·ªÉm tra tower th∆∞·ªùng c√≥ th·ªÉ x·ª≠ l√Ω kh√¥ng
local function ShouldProcessTower(tower)
    return tower and
        not tower.Destroyed and
        tower.HealthHandler and
        tower.HealthHandler:GetHealth() > 0 and
        not skipTowerTypes[tower.Type] and
        tower.AbilityHandler
end

-- ‚úÖ Ki·ªÉm tra tower ƒë·ªãnh h∆∞·ªõng nh∆∞ng kh√¥ng ph·∫£i skill ƒë·ªãnh h∆∞·ªõng
local function ShouldProcessNonDirectionalSkill(tower, abilityIndex)
    if tower.Type == "Commander" and abilityIndex ~= 3 then
        -- Commander skill 1, 2 x·ª≠ l√Ω nh∆∞ tower th∆∞·ªùng
        return tower and
            not tower.Destroyed and
            tower.HealthHandler and
            tower.HealthHandler:GetHealth() > 0 and
            tower.AbilityHandler
    end
    return false
end

-- üîÅ V√≤ng l·∫∑p ch√≠nh
while task.wait(0.1) do
    for hash, tower in pairs(TowerClass.GetTowers() or {}) do
        local towerType = tower.Type
        local directionalInfo = directionalTowerTypes[towerType]

        if directionalInfo and tower and tower.AbilityHandler then
            for abilityIndex = 1, 3 do
                pcall(function()
                    local ability = tower.AbilityHandler:GetAbilityFromIndex(abilityIndex)
                    if CanUseAbility(ability) then
                        -- N·∫øu l√† Commander, ch·ªâ skill 3 m·ªõi ƒë·ªãnh h∆∞·ªõng
                        if typeof(directionalInfo) == "table" and directionalInfo.onlyAbilityIndex then
                            if abilityIndex == directionalInfo.onlyAbilityIndex then
                                local enemyPos = GetFirstEnemyPosition()
                                if enemyPos then
                                    local args = {
                                        hash,
                                        abilityIndex,
                                        enemyPos
                                    }
                                    if useFireServer then
                                        TowerUseAbilityRequest:FireServer(unpack(args))
                                    else
                                        TowerUseAbilityRequest:InvokeServer(unpack(args))
                                    end
                                    task.wait(0.25)
                                    return
                                end
                            else
                                -- Skill 1, 2 c·ªßa Commander x·ª≠ l√Ω nh∆∞ tower th∆∞·ªùng
                                if ShouldProcessNonDirectionalSkill(tower, abilityIndex) then
                                    if useFireServer then
                                        TowerUseAbilityRequest:FireServer(hash, abilityIndex)
                                    else
                                        TowerUseAbilityRequest:InvokeServer(hash, abilityIndex)
                                    end
                                    task.wait(0.25)
                                end
                            end
                        else
                            -- C√°c tower ƒë·ªãnh h∆∞·ªõng kh√°c: m·ªçi skill ƒë·ªÅu c·∫ßn enemy position
                            local enemyPos = GetFirstEnemyPosition()
                            if enemyPos then
                                local args = {
                                    hash,
                                    abilityIndex,
                                    enemyPos
                                }
                                if useFireServer then
                                    TowerUseAbilityRequest:FireServer(unpack(args))
                                else
                                    TowerUseAbilityRequest:InvokeServer(unpack(args))
                                end
                                task.wait(0.25)
                                return
                            end
                        end
                    end
                end)
            end
        elseif ShouldProcessTower(tower) then
            for abilityIndex = 1, 3 do
                pcall(function()
                    local ability = tower.AbilityHandler:GetAbilityFromIndex(abilityIndex)
                    if CanUseAbility(ability) then
                        if useFireServer then
                            TowerUseAbilityRequest:FireServer(hash, abilityIndex)
                        else
                            TowerUseAbilityRequest:InvokeServer(hash, abilityIndex)
                        end
                        task.wait(0.25)
                    end
                end)
            end
        end
    end
end
