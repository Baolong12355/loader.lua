local ReplicatedStorage = game:GetService("ReplicatedStorage")  
local Players = game:GetService("Players")  
local LocalPlayer = Players.LocalPlayer  
local RunService = game:GetService("RunService")  
  
-- Ki·ªÉm tra Remotes  
local Remotes = ReplicatedStorage:FindFirstChild("Remotes")  
if not Remotes then  
    warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Remotes")  
    return  
end  
  
local Remote = Remotes:FindFirstChild("SoloToggleSpeedControl")  
if not Remote then  
    warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y SoloToggleSpeedControl")  
    return  
end  
  
-- H√†m ki·ªÉm tra Active Frame an to√†n  
local function getActiveFrame()  
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")  
    if not playerGui then return nil end  
      
    local interface = playerGui:FindFirstChild("Interface")  
    if not interface then return nil end  
      
    local speedChangeScreen = interface:FindFirstChild("SpeedChangeScreen")  
    if not speedChangeScreen then return nil end  
      
    local owned = speedChangeScreen:FindFirstChild("Owned")  
    if not owned then return nil end  
      
    return owned:FindFirstChild("Active")  
end  
  
-- Bi·∫øn ki·ªÉm so√°t  
local isWaiting = false  
local monitoring = true  
  
-- Ch·∫ø ƒë·ªô gi√°m s√°t th√¥ng minh  
RunService.Heartbeat:Connect(function()  
    if not monitoring then return end  
  
    local activeFrame = getActiveFrame()  
    if not activeFrame then  
        warn("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi UI, ƒëang th·ª≠ l·∫°i sau 5 gi√¢y...")  
        task.wait(5)  
        return  
    end  
  
    if not activeFrame.Visible and not isWaiting then  
        isWaiting = true  
  
        -- Ch·ªù cho ƒë·∫øn khi TextLabel kh√¥ng c√≤n l√† "Disabled"  
        local label  
        pcall(function()  
            label = activeFrame:FindFirstChild("Content"):FindFirstChild("Button"):FindFirstChild("TextLabel")  
        end)  
  
        if label then  
            while label.Text == "Disabled" do  
                print("üïí ƒêang ƒë·ª£i ch·∫ø ƒë·ªô kh√¥ng c√≤n b·ªã v√¥ hi·ªáu ho√°...")  
                task.wait(1)  
            end  
        else  
            warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y TextLabel ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i Disabled")  
        end  
  
        -- ƒê·∫øm ng∆∞·ª£c 3 gi√¢y tr∆∞·ªõc khi k√≠ch ho·∫°t  
        for i = 3, 1, -1 do  
            print("‚è≥ ƒê√£ ph√°t hi·ªán t·∫Øt, s·∫Ω k√≠ch ho·∫°t sau "..i.."s...")  
            task.wait(1)  
        end  
  
        -- G·ª≠i remote  
        if Remote:IsA("RemoteEvent") then  
            Remote:FireServer(true, true)  
        elseif Remote:IsA("RemoteFunction") then  
            Remote:InvokeServer(true, true)  
        end  
        print("‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu b·∫≠t l·∫°i")  
  
        -- Ch·ªù x√°c nh·∫≠n  
        task.wait(0.5)  
        if activeFrame.Visible then  
            print("üåà K√≠ch ho·∫°t th√†nh c√¥ng!")  
        else  
            warn("‚ùå V·∫´n kh√¥ng th·∫•y hi·ªÉn th·ªã, s·∫Ω th·ª≠ l·∫°i l·∫ßn t·ªõi")  
        end  
  
        isWaiting = false  
    end  
  
    task.wait(0.5) -- Ki·ªÉm tra m·ªói 0.5 gi√¢y  
end)  
  
print("üöÄ ƒê√£ b·∫≠t ch·∫ø ƒë·ªô gi√°m s√°t (Delay 3s khi ph√°t hi·ªán t·∫Øt)")