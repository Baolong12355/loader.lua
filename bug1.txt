-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/brNTY8nX8t)
-- Decompiled on 2025-06-23 21:12:11
-- Luau version 6, Types version 3
-- Time taken: 0.001591 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local Remotes_upvr = game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
local tbl_upvr = {}
function module_upvr.GetRemoteFunctionWrappers() -- Line 24
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	return tbl_upvr
end
if game:GetService("RunService"):IsServer() then
	local function _(arg1) -- Line 29, Named "CreateRemoteFunction"
		--[[ Upvalues[1]:
			[1]: Remotes_upvr (readonly)
		]]
		local RemoteFunction = Instance.new("RemoteFunction")
		RemoteFunction.Name = arg1
		RemoteFunction.Parent = Remotes_upvr
		return RemoteFunction
	end
	local function New(arg1) -- Line 37
		--[[ Upvalues[3]:
			[1]: Remotes_upvr (readonly)
			[2]: tbl_upvr (readonly)
			[3]: module_upvr (readonly)
		]]
		local module = {}
		module.Name = arg1
		local RemoteFunction_2 = Instance.new("RemoteFunction")
		RemoteFunction_2.Name = arg1
		RemoteFunction_2.Parent = Remotes_upvr
		module.RemoteFunction = RemoteFunction_2
		tbl_upvr[arg1] = module
		return setmetatable(module, module_upvr)
	end
	module_upvr.New = New
	function module_upvr.AttachCallback(arg1, arg2) -- Line 48
		arg1.RemoteFunction.OnServerInvoke = function(arg1_2, ...) -- Line 49
			--[[ Upvalues[1]:
				[1]: arg2 (readonly)
			]]
			return arg2(arg1_2, ...)
		end
	end
	function module_upvr.GetInitData(arg1) -- Line 54
		return {
			Name = arg1.Name;
		}
	end
	return module_upvr
end
local function _(arg1) -- Line 60, Named "FindRemoteFunction"
	--[[ Upvalues[1]:
		[1]: Remotes_upvr (readonly)
	]]
	local SOME = Remotes_upvr:FindFirstChild(arg1)
	if not SOME then
		warn("Remote function with name "..arg1.." not found")
	end
	return SOME
end
function module_upvr.New(arg1) -- Line 70
	--[[ Upvalues[3]:
		[1]: Remotes_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: module_upvr (readonly)
	]]
	local module_2 = {}
	module_2.Name = arg1
	local SOME_2 = Remotes_upvr:FindFirstChild(arg1)
	if not SOME_2 then
		warn("Remote function with name "..arg1.." not found")
	end
	module_2.RemoteFunction = SOME_2
	tbl_upvr[arg1] = module_2
	return setmetatable(module_2, module_upvr)
end
function module_upvr.InvokeServer(arg1, ...) -- Line 81
	return arg1.RemoteFunction:InvokeServer(...)
end
return module_upvr



-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/brNTY8nX8t)
-- Decompiled on 2025-06-23 21:13:20
-- Luau version 6, Types version 3
-- Time taken: 0.001065 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local tbl_upvr = {}
local function _(arg1) -- Line 12, Named "CreateBindableEvent"
	local BindableEvent = Instance.new("BindableEvent")
	BindableEvent.Name = arg1
	BindableEvent.Parent = script
	return BindableEvent
end
function module_upvr.GetBindableEventWrappers() -- Line 20
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	return tbl_upvr
end
function module_upvr.New(arg1) -- Line 24
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var4
	if tbl_upvr[arg1] ~= nil then
		var4 = false
	else
		var4 = true
	end
	assert(var4, "Bindable event with name "..arg1.." already exists")
	local tbl = {}
	tbl.Name = arg1
	local BindableEvent_2 = Instance.new("BindableEvent")
	BindableEvent_2.Name = arg1
	BindableEvent_2.Parent = script
	var4 = BindableEvent_2
	tbl.BindableEvent = var4
	var4 = tbl_upvr
	var4[arg1] = tbl
	var4 = setmetatable(tbl, module_upvr)
	return var4
end
function module_upvr.Fire(arg1, ...) -- Line 37
	arg1.BindableEvent:Fire(...)
end
function module_upvr.AttachCallback(arg1, arg2) -- Line 41
	arg1.BindableEvent.Event:Connect(function(...) -- Line 42
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		arg2(...)
	end)
end
return module_upvr





-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/brNTY8nX8t)
-- Decompiled on 2025-06-23 21:13:59
-- Luau version 6, Types version 3
-- Time taken: 0.011055 seconds

local module_9_upvr = {}
local Common = game:GetService("ReplicatedStorage"):WaitForChild("TDX_Shared"):WaitForChild("Common")
local module = require(Common:WaitForChild("NetworkingHandler"))
local module_2_upvr = require(script:WaitForChild("TowersBar"))
local module_8_upvr = require(script:WaitForChild("GameInfoHandler"))
local module_upvr_6 = require(script:WaitForChild("TowerUIHandler"))
local module_upvr_5 = require(script:WaitForChild("GameOverScreenHandler"))
local module_upvr_3 = require(script:WaitForChild("PlacementButtonsHandler"))
local module_upvr = require(script:WaitForChild("PowerUpsScreenHandler"))
local module_5_upvr = require(script:WaitForChild("AbilityHotbarHandler"))
local TOWERS_BAR_COUNT_upvr = _G.TOWERS_BAR_COUNT
local any_IsStudio_result1_upvr = game:GetService("RunService"):IsStudio()
local GameStates_upvr = require(Common:WaitForChild("Enums")).GameStates
local LocalPlayer_upvr = game:GetService("Players").LocalPlayer
local PlayerGui = LocalPlayer_upvr:WaitForChild("PlayerGui")
local Interface_upvr = PlayerGui:WaitForChild("Interface")
local LowPriorityInterface_upvr = PlayerGui:WaitForChild("LowPriorityInterface")
local FirstPersonInterface_upvr = PlayerGui:WaitForChild("FirstPersonInterface")
local var20_upvw
local var21_upvw = any_IsStudio_result1_upvr
local tbl_upvw = {}
local STUDIO_LOADOUT_upvr = _G.STUDIO_LOADOUT
local STUDIO_POWERUP_LOADOUT_upvr = _G.STUDIO_POWERUP_LOADOUT
local PreloadFrame_upvr = Interface_upvr:WaitForChild("PreloadFrame")
local TopAreaQueueFrame_upvr = Interface_upvr:WaitForChild("TopAreaQueueFrame")
local GuiService_upvr = game:GetService("GuiService")
local function Initialize_upvr() -- Line 84, Named "Initialize"
	--[[ Upvalues[15]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: any_IsStudio_result1_upvr (readonly)
		[3]: STUDIO_LOADOUT_upvr (readonly)
		[4]: STUDIO_POWERUP_LOADOUT_upvr (readonly)
		[5]: TOWERS_BAR_COUNT_upvr (readonly)
		[6]: module_2_upvr (readonly)
		[7]: module_5_upvr (readonly)
		[8]: module_upvr (readonly)
		[9]: PreloadFrame_upvr (readonly)
		[10]: TopAreaQueueFrame_upvr (readonly)
		[11]: GuiService_upvr (readonly)
		[12]: tbl_upvw (read and write)
		[13]: Interface_upvr (readonly)
		[14]: LowPriorityInterface_upvr (readonly)
		[15]: FirstPersonInterface_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	while true do
		local var52
		var52 = "LoadoutLoaded"
		if LocalPlayer_upvr:GetAttribute(var52) then break end
		task.wait(0.1)
	end
	local tbl = {}
	var52 = {}
	local PowerUpCount = LocalPlayer_upvr:GetAttribute("PowerUpCount")
	if any_IsStudio_result1_upvr then
	else
		for i = 1, TOWERS_BAR_COUNT_upvr do
			STUDIO_LOADOUT_upvr[i] = LocalPlayer_upvr:GetAttribute("LoadoutSlot"..i)
		end
		for i_2 = 1, PowerUpCount do
			STUDIO_POWERUP_LOADOUT_upvr[i_2] = LocalPlayer_upvr:GetAttribute("PowerUpSlot"..i_2)
		end
	end
	for i_3 = 1, TOWERS_BAR_COUNT_upvr do
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		local var55 = STUDIO_LOADOUT_upvr[i_3]
		if var55 and var55 ~= "" then
			tbl[i_3] = var55
		end
	end
	for i_4 = 1, PowerUpCount do
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		local var56 = STUDIO_POWERUP_LOADOUT_upvr[i_4]
		if var56 and var56 ~= "" then
			({})[i_4] = var56
		end
	end
	module_2_upvr.Initialize(tbl)
	module_5_upvr.Initialize(tbl)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	module_upvr.Initialize(PowerUpCount, {})
	task.spawn(function() -- Line 130
		--[[ Upvalues[1]:
			[1]: PreloadFrame_upvr (copied, readonly)
		]]
		PreloadFrame_upvr.Visible = true
		for _, v in pairs(PreloadFrame_upvr:GetChildren()) do
			if not v.IsLoaded then
				task.wait(0.1)
			end
		end
		PreloadFrame_upvr:Destroy()
	end)
	local var63 = TopAreaQueueFrame_upvr
	var63.Position += UDim2.new(0, 0, 0, -GuiService_upvr:GetGuiInset().Y)
	tbl_upvw = {}
	for _, v_2 in pairs(Interface_upvr:GetDescendants()) do
		local TutorialElementId = v_2:GetAttribute("TutorialElementId")
		if TutorialElementId then
			if not tbl_upvw[TutorialElementId] then
				tbl_upvw[TutorialElementId] = {}
			end
			table.insert(tbl_upvw[TutorialElementId], v_2)
		end
	end
	Interface_upvr.Enabled = true
	LowPriorityInterface_upvr.Enabled = true
	FirstPersonInterface_upvr.Enabled = false
end
local function _() -- Line 166, Named "DetectScreenSizeChange"
	--[[ Upvalues[2]:
		[1]: Interface_upvr (readonly)
		[2]: var20_upvw (read and write)
	]]
	local var68 = Interface_upvr
	local AbsoluteSize_2 = var68.AbsoluteSize
	if var20_upvw == AbsoluteSize_2 then
		var68 = false
	else
		var68 = true
	end
	if var68 then
		var20_upvw = AbsoluteSize_2
	end
end
local module_upvr_2 = require(Common:WaitForChild("SoundHandler"))
local module_10_upvr = require(script:WaitForChild("MapVotingScreenHandler"))
local module_4_upvr = require(script:WaitForChild("DifficultyVoteScreenHandler"))
local module_11_upvr = require(script:WaitForChild("LoadoutSelectionScreenHandler"))
local module_7_upvr = require(script:WaitForChild("CutsceneScreenHandler"))
local module_13_upvr = require(script:WaitForChild("TopNotificationHandler"))
local module_12_upvr = require(script:WaitForChild("SpeedChangeScreenHandler"))
function module_9_upvr.SetState(arg1, arg2, arg3) -- Line 175
	--[[ Upvalues[13]:
		[1]: GameStates_upvr (readonly)
		[2]: module_upvr_2 (readonly)
		[3]: module_upvr_6 (readonly)
		[4]: module_2_upvr (readonly)
		[5]: module_upvr_3 (readonly)
		[6]: module_10_upvr (readonly)
		[7]: module_4_upvr (readonly)
		[8]: module_11_upvr (readonly)
		[9]: module_7_upvr (readonly)
		[10]: module_upvr_5 (readonly)
		[11]: module_13_upvr (readonly)
		[12]: module_8_upvr (readonly)
		[13]: module_12_upvr (readonly)
	]]
	if arg1 ~= arg2 then
		if arg1 == GameStates_upvr.MapVoting then
			module_upvr_2.Play("EnemiesIncoming")
		elseif arg1 == GameStates_upvr.DifficultyVoting then
			module_upvr_2.Play("EnemiesIncoming")
		elseif arg1 == GameStates_upvr.LoadoutSelection then
			module_upvr_2.Play("EnemiesIncoming")
		elseif arg1 == GameStates_upvr.EndScreen then
			module_upvr_2.Play("EnemiesIncoming")
		end
	end
	if arg2 ~= GameStates_upvr.Running then
		module_upvr_6.Disable()
		if arg2 == GameStates_upvr.DifficultyVoting or arg2 == GameStates_upvr.MapVoting then
			module_2_upvr.Disable()
		else
			module_2_upvr.Disable(true)
		end
		module_upvr_3.Disable()
	end
	if arg2 ~= GameStates_upvr.MapVoting then
		module_10_upvr.Stop()
	end
	if arg2 ~= GameStates_upvr.DifficultyVoting then
		module_4_upvr.HideScreen()
	end
	if arg2 ~= GameStates_upvr.LoadoutSelection then
		local var77 = module_11_upvr
		if arg2 ~= GameStates_upvr.Running then
			var77 = false
		else
			var77 = true
		end
		var77.HideScreen(var77)
	end
	if arg2 ~= GameStates_upvr.Cutscene then
		module_7_upvr.HideScreen()
	end
	if arg2 ~= GameStates_upvr.EndScreen then
		module_upvr_5.HideScreen()
	end
	if arg2 == GameStates_upvr.Running then
		module_upvr_6.Enable()
		module_2_upvr.Enable(true)
		module_upvr_3.Enable()
		module_13_upvr.Disable()
	elseif arg2 == GameStates_upvr.MapVoting then
		module_10_upvr.Start(arg3.VoteStateData)
	elseif arg2 == GameStates_upvr.DifficultyVoting then
		module_4_upvr.DisplayScreen(arg3.VoteStateData, arg3.OverrideDifficulty, arg3.OverrideVotingScreenName)
	else
		local var78
		if arg2 == GameStates_upvr.LoadoutSelection then
			if arg1 ~= GameStates_upvr.DifficultyVoting then
				var78 = false
			else
				var78 = true
			end
			module_11_upvr.ShowScreen(arg3.Difficulty, var78)
		elseif arg2 == GameStates_upvr.Cutscene then
			module_7_upvr.ShowScreen()
		elseif arg2 == GameStates_upvr.EndScreen then
			module_upvr_5.DisplayScreen(arg3)
			module_13_upvr.Display(arg3)
		end
	end
	module_8_upvr.SetState(arg2)
	module_12_upvr.SetState(arg2)
	if arg2 == GameStates_upvr.Running or arg2 == GameStates_upvr.MapVoting or arg2 == GameStates_upvr.DifficultyVoting or arg2 == GameStates_upvr.LoadoutSelection then
		module_8_upvr.Enable(true)
	else
		module_8_upvr.Disable(true)
	end
end
function module_9_upvr.SelectTower(arg1) -- Line 256
	--[[ Upvalues[1]:
		[1]: module_upvr_6 (readonly)
	]]
	module_upvr_6.Show(arg1)
end
function module_9_upvr.DeselectTower() -- Line 260
	--[[ Upvalues[1]:
		[1]: module_upvr_6 (readonly)
	]]
	module_upvr_6.Hide()
end
local module_3_upvr = require(script:WaitForChild("PromptHandler"))
local module_6_upvr = require(script.Parent:WaitForChild("PlayerClass"))
local BottomLeftButtons_upvr = Interface_upvr:WaitForChild("BottomLeftButtons")
local module_upvr_4 = require(script:WaitForChild("AdminButtonHandler"))
function module_9_upvr.Update(arg1, arg2, arg3) -- Line 264
	--[[ Upvalues[14]:
		[1]: Interface_upvr (readonly)
		[2]: var20_upvw (read and write)
		[3]: module_upvr_6 (readonly)
		[4]: module_upvr_5 (readonly)
		[5]: module_3_upvr (readonly)
		[6]: module_5_upvr (readonly)
		[7]: GameStates_upvr (readonly)
		[8]: module_upvr (readonly)
		[9]: module_8_upvr (readonly)
		[10]: module_6_upvr (readonly)
		[11]: any_IsStudio_result1_upvr (readonly)
		[12]: BottomLeftButtons_upvr (readonly)
		[13]: var21_upvw (read and write)
		[14]: module_upvr_4 (readonly)
	]]
	local var99 = Interface_upvr
	local AbsoluteSize = var99.AbsoluteSize
	if var20_upvw == AbsoluteSize then
		var99 = false
	else
		var99 = true
	end
	if var99 then
		var20_upvw = AbsoluteSize
	end
	module_upvr_6.Update()
	module_upvr_5.Update(arg1)
	module_3_upvr.Update(arg1)
	module_5_upvr.Update(arg1)
	if arg2 == GameStates_upvr.Running then
		module_upvr.Enable()
	else
		module_upvr.Disable()
	end
	if arg2 == GameStates_upvr.Running or arg2 == GameStates_upvr.MapVoting or arg2 == GameStates_upvr.DifficultyVoting or arg2 == GameStates_upvr.LoadoutSelection then
		module_8_upvr.Update(arg1, arg1 * arg3)
	end
	local any_LocalPlayerHasTesterPanelAccess_result1 = module_6_upvr.LocalPlayerHasTesterPanelAccess()
	local var102 = any_IsStudio_result1_upvr
	if not var102 then
		var102 = any_LocalPlayerHasTesterPanelAccess_result1
		if not var102 then
			var102 = module_6_upvr.LocalPlayerHasAdminPanelAccess()
		end
	end
	if var102 then
		for _, v_3 in ipairs(BottomLeftButtons_upvr:GetChildren()) do
			if v_3:IsA("ImageButton") then
				if v_3:GetAttribute("Admin") then
					v_3.Visible = module_6_upvr.LocalPlayerHasAdminPanelAccess()
				elseif v_3:GetAttribute("Tester") then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					v_3.Visible = module_6_upvr.LocalPlayerHasAdminPanelAccess() or any_LocalPlayerHasTesterPanelAccess_result1
				end
			end
		end
	end
	BottomLeftButtons_upvr.Visible = var21_upvw and var102
	module_upvr_4.SetEnabled(var102)
end
function module_9_upvr.AddBoss(arg1) -- Line 321
	--[[ Upvalues[1]:
		[1]: module_8_upvr (readonly)
	]]
	module_8_upvr.AddBoss(arg1)
end
function module_9_upvr.RemoveBoss(arg1) -- Line 325
	--[[ Upvalues[1]:
		[1]: module_8_upvr (readonly)
	]]
	module_8_upvr.RemoveBoss(arg1)
end
function module_9_upvr.EnableTouchControls() -- Line 329
	--[[ Upvalues[1]:
		[1]: module_upvr_3 (readonly)
	]]
	module_upvr_3.EnableTouchControls()
end
function module_9_upvr.DisableTouchControls() -- Line 333
	--[[ Upvalues[1]:
		[1]: module_upvr_3 (readonly)
	]]
	module_upvr_3.DisableTouchControls()
end
function module_9_upvr.ToggleAdminPanel() -- Line 337
	--[[ Upvalues[1]:
		[1]: var21_upvw (read and write)
	]]
	var21_upvw = not var21_upvw
end
function module_9_upvr.Reset() -- Line 341
	--[[ Upvalues[1]:
		[1]: Initialize_upvr (readonly)
	]]
	Initialize_upvr()
end
function module_9_upvr.GetTutorialElementsForElementId(arg1) -- Line 345
	--[[ Upvalues[1]:
		[1]: tbl_upvw (read and write)
	]]
	local var106 = tbl_upvw[arg1]
	if not var106 then
		var106 = {}
	end
	return var106
end
function module_9_upvr.HideAllTutorialElements() -- Line 349
	--[[ Upvalues[1]:
		[1]: tbl_upvw (read and write)
	]]
	for _, v_4 in pairs(tbl_upvw) do
		for _, v_5 in pairs(v_4) do
			v_5.Visible = false
		end
	end
end
function module_9_upvr.ToggleFPSMode(arg1) -- Line 357
	--[[ Upvalues[4]:
		[1]: Interface_upvr (readonly)
		[2]: LowPriorityInterface_upvr (readonly)
		[3]: FirstPersonInterface_upvr (readonly)
		[4]: module_upvr_6 (readonly)
	]]
	if arg1 then
		Interface_upvr.Enabled = false
		LowPriorityInterface_upvr.Enabled = false
		FirstPersonInterface_upvr.Enabled = true
		module_upvr_6.FPSModeEnabled()
	else
		Interface_upvr.Enabled = true
		LowPriorityInterface_upvr.Enabled = true
		FirstPersonInterface_upvr.Enabled = false
	end
end
Initialize_upvr()
local ViewportTesting = LowPriorityInterface_upvr:FindFirstChild("ViewportTesting")
if ViewportTesting then
	ViewportTesting:Destroy()
end
require(Common:WaitForChild("BindableHandler")).GetEvent("ToggleAdminPanel"):AttachCallback(function() -- Line 380
	--[[ Upvalues[1]:
		[1]: module_9_upvr (readonly)
	]]
	module_9_upvr.ToggleAdminPanel()
end)
module.GetEvent("LoadoutChanged"):AttachCallback(function(arg1) -- Line 384
	--[[ Upvalues[5]:
		[1]: any_IsStudio_result1_upvr (readonly)
		[2]: TOWERS_BAR_COUNT_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: module_2_upvr (readonly)
		[5]: module_5_upvr (readonly)
	]]
	if arg1 and any_IsStudio_result1_upvr then
	else
		for i_10 = 1, TOWERS_BAR_COUNT_upvr do
			local attribute = LocalPlayer_upvr:GetAttribute("LoadoutSlot"..i_10)
			if attribute then
				module_2_upvr.SetTower(i_10, attribute)
				if attribute ~= "" then
					({})[i_10] = attribute
				end
			end
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		module_5_upvr.Initialize({})
	end
end)
local any_GetFunction_result1_upvr = module.GetFunction("AdminPanelRequest")
require(Common:WaitForChild("ChatHandlerClientside")).AddOnIncomingMessageCallback(function(arg1) -- Line 406
	--[[ Upvalues[3]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: module_9_upvr (readonly)
		[3]: any_GetFunction_result1_upvr (readonly)
	]]
	if arg1.TextSource.UserId ~= LocalPlayer_upvr.UserId then
	else
		if arg1.Text == "/admin" then
			module_9_upvr.ToggleAdminPanel()
			return
		end
		if arg1.Text == "/cash" then
			any_GetFunction_result1_upvr:InvokeServer("Cash")
		end
	end
end)
return module_9_upvr
