local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- File output
local outJson = "tdx/macros/recorder_output.json"

-- X√≥a file c≈© n·∫øu t·ªìn t·∫°i
if isfile and isfile(outJson) and delfile then
    local ok, err = pcall(delfile, outJson)
    if not ok then
        warn("Kh√¥ng th·ªÉ x√≥a file c≈©: " .. tostring(err))
    end
end

local recordedActions = {}

-- T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
if makefolder then
    pcall(makefolder, "tdx")
    pcall(makefolder, "tdx/macros")
end

--==============================================================================
--=                           H√ÄM TI·ªÜN √çCH                                     =
--==============================================================================

-- H√†m ghi file an to√†n
local function safeWriteFile(path, content)
    if writefile then
        local success, err = pcall(writefile, path, content)
        if not success then
            warn("L·ªói khi ghi file: " .. tostring(err))
        else
            print("‚úÖ ƒê√£ ghi file:", path)
        end
    end
end

-- L·∫•y th√¥ng tin wave v√† th·ªùi gian hi·ªán t·∫°i
local function getCurrentWaveAndTime()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return nil, nil end

    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return nil, nil end
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return nil, nil end

    local wave = gameInfoBar.Wave.WaveText.Text
    local time = gameInfoBar.TimeLeft.TimeLeftText.Text
    return wave, time
end

-- Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian (vd: "1:23") th√†nh s·ªë (vd: 123)
local function convertTimeToNumber(timeStr)
    if not timeStr then return nil end
    local mins, secs = timeStr:match("(%d+):(%d+)")
    if mins and secs then
        return tonumber(mins) * 100 + tonumber(secs)
    end
    return nil
end

-- C·∫≠p nh·∫≠t file JSON
local function updateJsonFile()
    if not HttpService then return end
    local jsonLines = {}
    for i, entry in ipairs(recordedActions) do
        local ok, jsonStr = pcall(HttpService.JSONEncode, HttpService, entry)
        if ok then
            if i < #recordedActions then
                jsonStr = jsonStr .. ","
            end
            table.insert(jsonLines, jsonStr)
        end
    end
    local finalJson = "[\n" .. table.concat(jsonLines, "\n") .. "\n]"
    safeWriteFile(outJson, finalJson)
end

--==============================================================================
--=                      X·ª¨ L√ù SKIP WAVE                                       =
--==============================================================================

-- Hook namecall ƒë·ªÉ b·∫Øt Skip Wave
local function setupSkipWaveHook()
    if not hookmetamethod or not checkcaller then
        warn("Executor kh√¥ng h·ªó tr·ª£ hook!")
        return
    end

    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        if checkcaller() then return oldNamecall(self, ...) end
        
        local method = getnamecallmethod()
        if method == "FireServer" then
            local args = {...}
            local remoteName = self.Name

            -- Debug: Log t·∫•t c·∫£ remote calls
            print("üî• REMOTE:", remoteName, "| ARGS:", unpack(args))
            
            -- X·ª≠ l√Ω Skip Wave
            if remoteName == "SkipWaveVoteCast" then
                local voteValue = args[1]
                print("üéØ SKIP WAVE DETECTED!")
                print("üìã Vote Value:", voteValue, "| Type:", typeof(voteValue))
                
                if typeof(voteValue) == "boolean" and voteValue == true then
                    -- G·ª¨I SERVER ·ªû D·∫†NG TXT, KH√îNG PH·∫¢I JSON!
                    local txtCommand = "TDX:skipWave()"
                    
                    print("üìù TXT Command:", txtCommand)
                    print("‚úÖ Skip Wave command t·∫°o th√†nh c√¥ng!")
                    
                    -- C√≥ th·ªÉ ghi v√†o file txt ho·∫∑c g·ª≠i l√™n server
                    -- T√πy v√†o c√°ch server nh·∫≠n
                else
                    print("‚ùå Vote value kh√¥ng h·ª£p l·ªá")
                end
            end
        end
        
        -- G·ª≠i server nguy√™n b·∫£n
        return oldNamecall(self, ...)
    end)
    
    print("üé£ Skip Wave hook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
end

--==============================================================================
--=                         KH·ªûI T·∫†O                                           =
--==============================================================================

setupSkipWaveHook()

print("‚úÖ TRecorder ƒë√£ ho·∫°t ƒë·ªông!")
print("üìÅ File output: " .. outJson)
print("üéØ Ch·ªâ ghi Skip Wave, b·ªè qua c√°c action kh√°c")
print("üîç S·∫Ω log t·∫•t c·∫£ remote calls ƒë·ªÉ debug")