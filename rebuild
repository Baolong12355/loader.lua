-- Formation Manager - GitHub/Loadstring Compatible
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local formationFile = "formation.json"

-- Ensure required services are available
if not player or not ReplicatedStorage or not HttpService then
    warn("Required services not available")
    return
end

-- Tower data storage
local towerCache = {}
local isActive = false

-- Safe service getter
local function GetService(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    return success and service or nil
end

-- Get tower class safely
local function GetTowerClass()
    local playerScripts = player:FindFirstChild("PlayerScripts")
    if not playerScripts then return nil end
    
    local client = playerScripts:FindFirstChild("Client")
    if not client then return nil end
    
    local gameClass = client:FindFirstChild("GameClass")
    if not gameClass then return nil end
    
    local towerModule = gameClass:FindFirstChild("TowerClass")
    if not towerModule then return nil end
    
    local success, towerClass = pcall(require, towerModule)
    return success and towerClass or nil
end

-- Get current tower information
local function GetCurrentTowers()
    local towers = {}
    local TowerClass = GetTowerClass()
    
    if not TowerClass then return towers end
    
    local allTowers = TowerClass.GetTowers()
    if not allTowers then return towers end
    
    for hash, tower in pairs(allTowers) do
        local success, towerInfo = pcall(function()
            if not tower.Character then return nil end
            
            local model = tower.Character:GetCharacterModel()
            if not model then return nil end
            
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            if not root then return nil end
            
            local pos = root.Position
            local name = tower.Name
            
            -- Check if tower is alive
            if tower.HealthHandler then
                local health = tower.HealthHandler:GetHealth()
                if health <= 0 then return nil end
            end
            
            -- Get upgrade levels
            local levels = {0, 0, 0}
            if tower.LevelHandler then
                for i = 1, 3 do
                    local level = tower.LevelHandler:GetLevelOnPath(i)
                    levels[i] = level or 0
                end
            end
            
            -- Get target type
            local targetType = 1
            if tower.TargetHandler then
                targetType = tower.TargetHandler:GetQueryType() or 1
            end
            
            return {
                x = math.floor(pos.X * 10) / 10,
                y = math.floor(pos.Y * 10) / 10,
                z = math.floor(pos.Z * 10) / 10,
                name = name,
                levels = levels,
                target = targetType,
                hash = tostring(hash)
            }
        end)
        
        if success and towerInfo then
            table.insert(towers, towerInfo)
        end
    end
    
    return towers
end

-- Save formation to file
local function SaveFormation()
    local towers = GetCurrentTowers()
    if not towers or #towers == 0 then 
        return false
    end
    
    local success = pcall(function()
        local jsonData = HttpService:JSONEncode(towers)
        writefile(formationFile, jsonData)
    end)
    
    if success then
        print("Formation saved: " .. #towers .. " towers")
        return true
    else
        warn("Failed to save formation")
        return false
    end
end

-- Load formation from file
local function LoadFormation()
    if not isfile(formationFile) then 
        return {}
    end
    
    local success, data = pcall(function()
        local content = readfile(formationFile)
        return HttpService:JSONDecode(content)
    end)
    
    if success and data then
        return data
    else
        warn("Failed to load formation")
        return {}
    end
end

-- Place tower with retry
local function PlaceTower(towerName, position)
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then return false end
    
    local placeTower = remotes:FindFirstChild("PlaceTower")
    if not placeTower then return false end
    
    local pos = Vector3.new(position.x, position.y, position.z)
    
    for attempt = 1, 3 do
        local success = pcall(function()
            placeTower:InvokeServer(1, towerName, pos, 0)
        end)
        
        if success then
            wait(0.5)
            -- Verify tower was placed
            local towers = GetCurrentTowers()
            for _, tower in pairs(towers) do
                if math.abs(tower.x - position.x) < 0.5 and tower.name == towerName then
                    return true
                end
            end
        end
        
        wait(0.2)
    end
    
    return false
end

-- Upgrade tower
local function UpgradeTowerPath(xPos, path, targetLevel)
    local TowerClass = GetTowerClass()
    if not TowerClass then return end
    
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then return end
    
    local upgradeRemote = remotes:FindFirstChild("TowerUpgradeRequest")
    if not upgradeRemote then return end
    
    local allTowers = TowerClass.GetTowers()
    if not allTowers then return end
    
    for hash, tower in pairs(allTowers) do
        local success, pos = pcall(function()
            local model = tower.Character:GetCharacterModel()
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            return root and root.Position
        end)
        
        if success and pos and math.abs(pos.X - xPos) < 0.5 then
            if tower.LevelHandler then
                local currentLevel = tower.LevelHandler:GetLevelOnPath(path) or 0
                
                for level = currentLevel + 1, targetLevel do
                    local upgradeSuccess = pcall(function()
                        upgradeRemote:FireServer(hash, path, 1)
                    end)
                    
                    if upgradeSuccess then
                        wait(0.3)
                    end
                end
            end
            break
        end
    end
end

-- Change tower target
local function ChangeTowerTarget(xPos, targetType)
    local TowerClass = GetTowerClass()
    if not TowerClass then return end
    
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then return end
    
    local changeQuery = remotes:FindFirstChild("ChangeQueryType")
    if not changeQuery then return end
    
    local allTowers = TowerClass.GetTowers()
    if not allTowers then return end
    
    for hash, tower in pairs(allTowers) do
        local success, pos = pcall(function()
            local model = tower.Character:GetCharacterModel()
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            return root and root.Position
        end)
        
        if success and pos and math.abs(pos.X - xPos) < 0.5 then
            pcall(function()
                changeQuery:FireServer(hash, targetType)
            end)
            break
        end
    end
end

-- Rebuild formation
local function RebuildFormation()
    local formation = LoadFormation()
    if not formation or #formation == 0 then
        print("No formation data found")
        return
    end
    
    print("Rebuilding formation with " .. #formation .. " towers")
    
    for i, towerData in ipairs(formation) do
        print("Placing tower " .. i .. "/" .. #formation .. ": " .. towerData.name)
        
        -- Place tower
        local placed = PlaceTower(towerData.name, {
            x = towerData.x, 
            y = towerData.y, 
            z = towerData.z
        })
        
        if placed then
            wait(0.5)
            
            -- Upgrade paths
            for path = 1, 3 do
                local targetLevel = towerData.levels[path] or 0
                if targetLevel > 0 then
                    UpgradeTowerPath(towerData.x, path, targetLevel)
                end
            end
            
            -- Change target if needed
            if towerData.target and towerData.target ~= 1 then
                ChangeTowerTarget(towerData.x, towerData.target)
            end
        else
            warn("Failed to place tower: " .. towerData.name)
        end
        
        wait(0.2)
    end
    
    print("Formation rebuild completed")
end

-- Auto-save system
local function InitializeAutoSave()
    if isActive then return end
    isActive = true
    
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then return end
    
    -- Tower placement/selling
    local factoryUpdate = remotes:FindFirstChild("TowerFactoryQueueUpdated")
    if factoryUpdate then
        factoryUpdate.OnClientEvent:Connect(function()
            wait(0.5)
            SaveFormation()
        end)
    end
    
    -- Tower upgrades
    local upgradeUpdate = remotes:FindFirstChild("TowerUpgradeQueueUpdated")
    if upgradeUpdate then
        upgradeUpdate.OnClientEvent:Connect(function()
            wait(0.5)
            SaveFormation()
        end)
    end
    
    -- Target changes
    local queryUpdate = remotes:FindFirstChild("TowerQueryTypeIndexChanged")
    if queryUpdate then
        queryUpdate.OnClientEvent:Connect(function()
            wait(0.2)
            SaveFormation()
        end)
    end
end

-- Global functions
getgenv().rebuild = function()
    spawn(RebuildFormation)
end

getgenv().save = function()
    SaveFormation()
end

getgenv().clear = function()
    if isfile(formationFile) then
        delfile(formationFile)
        print("Formation data cleared")
    else
        print("No formation data to clear")
    end
end

-- Initialize script
local function Initialize()
    wait(2)
    
    InitializeAutoSave()
    SaveFormation()
    
    print("Formation Manager loaded successfully")
    print("Commands: rebuild(), save(), clear()")
end

-- Start initialization
spawn(Initialize)
