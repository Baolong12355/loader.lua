local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

print("üéØ Enhanced SkipWave Test - Safe Text Format")
print("="..string.rep("=", 50))

-- Bi·∫øn ƒë·ªÉ track
local skipCount = 0
local serverResponses = {}

-- L·∫•y wave hi·ªán t·∫°i
local function getCurrentWave()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return "Unknown" end
    
    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return "Unknown" end
    
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return "Unknown" end
    
    return gameInfoBar.Wave.WaveText.Text
end

-- L·∫•y th·ªùi gian hi·ªán t·∫°i
local function getCurrentTime()
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then return "Unknown" end
    
    local interface = playerGui:FindFirstChild("Interface")
    if not interface then return "Unknown" end
    
    local gameInfoBar = interface:FindFirstChild("GameInfoBar")
    if not gameInfoBar then return "Unknown" end
    
    return gameInfoBar.TimeLeft.TimeLeftText.Text
end

-- Chuy·ªÉn ƒë·ªïi time string th√†nh number
local function convertTimeToNumber(timeStr)
    if not timeStr then return nil end
    local mins, secs = timeStr:match("(%d+):(%d+)")
    if mins and secs then
        return tonumber(mins) * 100 + tonumber(secs)
    end
    return nil
end

-- Safe function ƒë·ªÉ convert data th√†nh text
local function safeDataToText(data)
    if data == nil then
        return "nil"
    elseif type(data) == "string" then
        return string.format('"%s"', data)
    elseif type(data) == "number" then
        return tostring(data)
    elseif type(data) == "boolean" then
        return tostring(data)
    elseif type(data) == "table" then
        local parts = {}
        for i, v in ipairs(data) do
            table.insert(parts, safeDataToText(v))
        end
        -- N·∫øu kh√¥ng c√≥ array elements, th·ª≠ pairs
        if #parts == 0 then
            for k, v in pairs(data) do
                table.insert(parts, string.format("%s=%s", tostring(k), safeDataToText(v)))
            end
        end
        return string.format("{%s}", table.concat(parts, ", "))
    else
        return string.format("(%s: %s)", type(data), tostring(data))
    end
end

-- Safe function ƒë·ªÉ convert args th√†nh text
local function safeArgsToText(args)
    if not args or #args == 0 then
        return "(no args)"
    end
    
    local argTexts = {}
    for i, arg in ipairs(args) do
        table.insert(argTexts, safeDataToText(arg))
    end
    return table.concat(argTexts, ", ")
end

-- X·ª≠ l√Ω skip wave v·ªõi server response
local function handleSkipWave(method, args, serverResponse)
    skipCount = skipCount + 1
    local wave = getCurrentWave()
    local time = getCurrentTime()
    local timeNumber = convertTimeToNumber(time)
    
    print(string.format("üöÄ [%s] SKIP WAVE #%d", method, skipCount))
    print(string.format("   üìä Wave: %s | Time: %s (%s)", wave, time, timeNumber or "N/A"))
    print(string.format("   üìã Args: %s", safeArgsToText(args)))
    
    -- Hi·ªÉn th·ªã server response n·∫øu c√≥
    if serverResponse ~= nil then
        local responseText = safeDataToText(serverResponse)
        print(string.format("   üåê Server Response: %s", responseText))
        print(string.format("   üì° Response Type: %s", type(serverResponse)))
        
        -- L∆∞u response ƒë·ªÉ ph√¢n t√≠ch
        table.insert(serverResponses, {
            count = skipCount,
            wave = wave,
            time = time,
            timeNumber = timeNumber,
            args = args,
            response = serverResponse,
            responseText = responseText,
            timestamp = tick()
        })
    else
        print("   üåê Server Response: (No response - FireServer)")
    end
    
    print(string.format("   üïê Timestamp: %s", os.date("%H:%M:%S")))
    print("")
    
    -- T·∫°o command format TDX v·ªõi th√¥ng tin chi ti·∫øt
    local command = "TDX:skipWave()"
    print(string.format("   üíæ Command: %s", command))
    
    -- Th√™m th√¥ng tin cho macro format
    if timeNumber then
        print(string.format("   üìù Macro Format: SkipWhen=%s, SkipWave=%s", wave, timeNumber))
    end
    print("")
end

--==============================================================================
--=                         HOOK FIRESERVER                                    =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho FireServer (RemoteEvent)")
if hookfunction then
    local success = pcall(function()
        local oldFireServer = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
            -- Ch·ªâ x·ª≠ l√Ω SkipWaveVoteCast
            if self.Name == "SkipWaveVoteCast" then
                local args = {...}
                handleSkipWave("FireServer-Hook", args, nil) -- FireServer kh√¥ng c√≥ return value
            end
            
            -- G·ªçi original function
            return oldFireServer(self, ...)
        end)
        print("‚úÖ FireServer Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå FireServer Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookfunction kh√¥ng kh·∫£ d·ª•ng cho FireServer")
end

--==============================================================================
--=                        HOOK INVOKESERVER                                   =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho InvokeServer (RemoteFunction)")
if hookfunction then
    local success = pcall(function()
        local oldInvokeServer = hookfunction(Instance.new("RemoteFunction").InvokeServer, function(self, ...)
            -- Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ RemoteFunction t√™n SkipWaveVoteCast
            if self.Name == "SkipWaveVoteCast" then
                local args = {...}
                local result = oldInvokeServer(self, ...)
                handleSkipWave("InvokeServer-Hook", args, result)
                return result
            end
            
            -- G·ªçi original function cho c√°c remote kh√°c
            return oldInvokeServer(self, ...)
        end)
        print("‚úÖ InvokeServer Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå InvokeServer Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookfunction kh√¥ng kh·∫£ d·ª•ng cho InvokeServer")
end

--==============================================================================
--=                       HOOK METAMETHOD                                      =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho __namecall")
if hookmetamethod and checkcaller then
    local success = pcall(function()
        local oldNamecall
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            -- B·ªè qua n·∫øu l√† internal call
            if checkcaller() then return oldNamecall(self, ...) end
            
            local method = getnamecallmethod()
            
            -- X·ª≠ l√Ω FireServer
            if method == "FireServer" and self.Name == "SkipWaveVoteCast" then
                local args = {...}
                handleSkipWave("Namecall-FireServer", args, nil)
            
            -- X·ª≠ l√Ω InvokeServer (n·∫øu c√≥)
            elseif method == "InvokeServer" and self.Name == "SkipWaveVoteCast" then
                local args = {...}
                local result = oldNamecall(self, ...)
                handleSkipWave("Namecall-InvokeServer", args, result)
                return result
            end
            
            -- G·ªçi original function
            return oldNamecall(self, ...)
        end)
        print("‚úÖ Namecall Hook - TH√ÄNH C√îNG")
    end)
    
    if not success then
        print("‚ùå Namecall Hook - TH·∫§T B·∫†I")
    end
else
    print("‚ùå hookmetamethod ho·∫∑c checkcaller kh√¥ng kh·∫£ d·ª•ng")
end

--==============================================================================
--=                      HOOK CLIENT EVENTS                                    =
--==============================================================================

print("üîß Thi·∫øt l·∫≠p Hook cho Client Events")
local function setupClientEventHooks()
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then
        print("‚ùå Remotes folder kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local hookedEvents = 0
    
    -- T√¨m c√°c event c√≥ th·ªÉ li√™n quan ƒë·∫øn skip wave response
    for _, remote in pairs(remotes:GetChildren()) do
        if remote:IsA("RemoteEvent") then
            local name = remote.Name:lower()
            if string.find(name, "skip") or 
               string.find(name, "wave") or
               string.find(name, "vote") or
               string.find(name, "cast") or
               string.find(name, "result") then
                
                local success = pcall(function()
                    remote.OnClientEvent:Connect(function(...)
                        local args = {...}
                        local argsText = safeArgsToText(args)
                        
                        print(string.format("üì° Client Event [%s]: %s", remote.Name, argsText))
                        
                        -- L∆∞u event data
                        table.insert(serverResponses, {
                            type = "ClientEvent",
                            remoteName = remote.Name,
                            data = args,
                            dataText = argsText,
                            timestamp = tick()
                        })
                    end)
                    hookedEvents = hookedEvents + 1
                    print(string.format("‚úÖ ƒê√£ hook client event: %s", remote.Name))
                end)
                
                if not success then
                    print(string.format("‚ùå Kh√¥ng th·ªÉ hook event: %s", remote.Name))
                end
            end
        end
    end
    
    print(string.format("üìä ƒê√£ hook %d client events", hookedEvents))
end

setupClientEventHooks()

--==============================================================================
--=                         MANUAL TEST FUNCTIONS                              =
--==============================================================================

-- Test function v·ªõi detailed logging
_G.testSkipWave = function()
    print("")
    print("üß™ MANUAL TEST: G·ª≠i SkipWaveVoteCast...")
    print("="..string.rep("-", 30))
    
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if remotes then
        local skipRemote = remotes:FindFirstChild("SkipWaveVoteCast")
        if skipRemote then
            local beforeWave = getCurrentWave()
            local beforeTime = getCurrentTime()
            
            print(string.format("üìä Tr∆∞·ªõc khi skip - Wave: %s, Time: %s", beforeWave, beforeTime))
            
            -- Test v·ªõi vote = true
            print("üì§ G·ª≠i vote = true...")
            skipRemote:FireServer(true)
            
            -- Ch·ªù m·ªôt ch√∫t ƒë·ªÉ xem response
            task.wait(0.5)
            
            local afterWave = getCurrentWave()
            local afterTime = getCurrentTime()
            print(string.format("üìä Sau khi skip - Wave: %s, Time: %s", afterWave, afterTime))
            
            print("‚úÖ Manual test ho√†n th√†nh!")
        else
            print("‚ùå SkipWaveVoteCast remote kh√¥ng t√¨m th·∫•y")
        end
    else
        print("‚ùå Remotes folder kh√¥ng t√¨m th·∫•y")
    end
    print("")
end

-- Function ƒë·ªÉ xem t·∫•t c·∫£ responses ƒë√£ thu th·∫≠p
_G.showResponses = function()
    print("")
    print("üìä T·∫§T C·∫¢ SERVER RESPONSES:")
    print("="..string.rep("=", 40))
    
    if #serverResponses == 0 then
        print("‚ùå Ch∆∞a c√≥ response n√†o ƒë∆∞·ª£c ghi nh·∫≠n")
        return
    end
    
    for i, response in ipairs(serverResponses) do
        print(string.format("üì¶ Response #%d:", i))
        if response.count then
            print(string.format("   Count: %s", response.count))
            print(string.format("   Wave: %s", response.wave or "N/A"))
            print(string.format("   Time: %s", response.time or "N/A"))
            print(string.format("   Type: Skip"))
        else
            print(string.format("   Type: %s", response.type or "Unknown"))
            print(string.format("   Remote: %s", response.remoteName or "N/A"))
        end
        
        if response.responseText then
            print(string.format("   Data: %s", response.responseText))
        elseif response.dataText then
            print(string.format("   Data: %s", response.dataText))
        else
            print("   Data: (No data)")
        end
        print("")
    end
end

-- Function ƒë·ªÉ clear responses
_G.clearResponses = function()
    serverResponses = {}
    skipCount = 0
    print("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ responses v√† reset counter")
end

-- Function ƒë·ªÉ test v·ªõi c√°c arguments kh√°c nhau
_G.testSkipVariations = function()
    print("")
    print("üß™ TESTING SKIP VARIATIONS...")
    print("="..string.rep("-", 30))
    
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then
        print("‚ùå Remotes folder kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local skipRemote = remotes:FindFirstChild("SkipWaveVoteCast")
    if not skipRemote then
        print("‚ùå SkipWaveVoteCast remote kh√¥ng t√¨m th·∫•y")
        return
    end
    
    local tests = {
        {name = "Vote True", args = {true}},
        {name = "Vote False", args = {false}},
        {name = "String True", args = {"true"}},
        {name = "Number 1", args = {1}},
        {name = "Number 0", args = {0}},
        {name = "No Args", args = {}},
    }
    
    for i, test in ipairs(tests) do
        print(string.format("üì§ Test %d: %s - Args: %s", i, test.name, safeArgsToText(test.args)))
        
        local success = pcall(function()
            if #test.args == 0 then
                skipRemote:FireServer()
            else
                skipRemote:FireServer(unpack(test.args))
            end
        end)
        
        if success then
            print("   ‚úÖ G·ª≠i th√†nh c√¥ng")
        else
            print("   ‚ùå G·ª≠i th·∫•t b·∫°i")
        end
        
        task.wait(0.2) -- Ng·∫Øt gi·ªØa c√°c test
    end
    
    print("‚úÖ Ho√†n th√†nh t·∫•t c·∫£ test variations!")
    print("")
end

--==============================================================================
--=                         REMOTE ANALYSIS                                    =
--==============================================================================

print("üîç Ph√¢n t√≠ch RemoteEvents v√† RemoteFunctions...")
local function analyzeRemotes()
    local remotes = ReplicatedStorage:FindFirstChild("Remotes")
    if not remotes then
        print("‚ùå Kh√¥ng t√¨m th·∫•y Remotes folder")
        return
    end
    
    local skipRelated = {}
    local allRemotes = {}
    
    for _, remote in pairs(remotes:GetChildren()) do
        table.insert(allRemotes, {
            Name = remote.Name,
            Type = remote.ClassName
        })
        
        local name = remote.Name:lower()
        if string.find(name, "skip") or 
           string.find(name, "wave") or 
           string.find(name, "vote") or
           string.find(name, "cast") or
           string.find(name, "result") then
            table.insert(skipRelated, {
                Name = remote.Name,
                Type = remote.ClassName
            })
        end
    end
    
    print(string.format("üìä T·ªïng c·ªông: %d remotes", #allRemotes))
    
    if #skipRelated > 0 then
        print("üéØ T√¨m th·∫•y c√°c remote li√™n quan ƒë·∫øn skip/wave/vote:")
        for _, remote in ipairs(skipRelated) do
            print(string.format("   üì° %s (%s)", remote.Name, remote.Type))
        end
    else
        print("‚ùå Kh√¥ng t√¨m th·∫•y remote n√†o li√™n quan ƒë·∫øn skip/wave/vote")
        print("üìã T·∫•t c·∫£ remotes:")
        for _, remote in ipairs(allRemotes) do
            print(string.format("   üì° %s (%s)", remote.Name, remote.Type))
        end
    end
end

analyzeRemotes()

print("="..string.rep("=", 50))
print("‚úÖ Enhanced SkipWave Test (Safe Format) ƒë√£ s·∫µn s√†ng!")
print("üéÆ Commands:")
print("   _G.testSkipWave() - Test manual c∆° b·∫£n")
print("   _G.testSkipVariations() - Test nhi·ªÅu variations")
print("   _G.showResponses() - Xem t·∫•t c·∫£ responses")
print("   _G.clearResponses() - Clear data")
print("üìä Script s·∫Ω hi·ªÉn th·ªã chi ti·∫øt server response (safe text format)")
print("")