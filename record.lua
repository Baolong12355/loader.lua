-- Tower Defense Macro Recorder (Phi√™n b·∫£n ho√†n ch·ªânh)
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")

local player = Players.LocalPlayer
local macroData = {}
local recording = false

-- C·∫•u h√¨nh
local config = getgenv().TDX_Config or {}
local macroName = config["Macro Name"] or "macro_"..os.time()

-- K·∫øt n·ªëi c√°c Remote
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local PlaceTowerRemote = Remotes:WaitForChild("PlaceTower")
local UpgradeRemote = Remotes:WaitForChild("TowerUpgradeRequest")
local TargetRemote = Remotes:WaitForChild("ChangeQueryType")
local SellRemote = Remotes:WaitForChild("SellTower")

-- H√†m require an to√†n v·ªõi th·ªùi gian ch·ªù
local function SafeRequire(path, timeout)
    timeout = timeout or 5
    local startTime = os.clock()
    local module
    
    while os.clock() - startTime < timeout do
        local success, result = pcall(function()
            return require(path)
        end)
        
        if success then
            module = result
            break
        end
        task.wait(0.1)
    end
    
    return module
end

-- L·∫•y TowerClass
local TowerClass
local function LoadTowerClass()
    local clientFolder = player.PlayerScripts:FindFirstChild("Client")
    if not clientFolder then return nil end

    local gameClass = clientFolder:FindFirstChild("GameClass")
    if not gameClass then return nil end

    local towerClassModule = gameClass:FindFirstChild("TowerClass")
    if not towerClassModule then return nil end

    return SafeRequire(towerClassModule)
end

TowerClass = LoadTowerClass()

-- H√†m l·∫•y v·ªã tr√≠ X c·ªßa th√°p t·ª´ model
local function GetTowerX(tower)
    if not tower then return nil end
    
    -- ∆Øu ti√™n l·∫•y t·ª´ Character model
    if tower.Character and tower.Character.GetTorso then
        local torso = tower.Character:GetTorso()
        if torso then return torso.Position.X end
    end
    
    -- Fallback: l·∫•y t·ª´ ph∆∞∆°ng th·ª©c GetPosition n·∫øu c√≥
    if tower.GetPosition then
        local pos = tower:GetPosition()
        return pos and pos.X
    end
    
    return nil
end

-- H√†m l∆∞u macro
local function SaveMacro()
    if not recording then return end
    recording = false
    
    if not isfolder("tdx/macros") then
        makefolder("tdx")
        makefolder("tdx/macros")
    end
    
    local fileName = macroName:match("%.json$") and macroName or macroName..".json"
    local macroPath = "tdx/macros/"..fileName
    
    writefile(macroPath, HttpService:JSONEncode(macroData))
    print("üíæ ƒê√£ l∆∞u macro v√†o:", macroPath)
    print("T·ªïng s·ªë h√†nh ƒë·ªông:", #macroData)
end

-- B·∫Øt ƒë·∫ßu ghi macro
local function StartRecording()
    macroData = {}
    recording = true
    print("üî¥ B·∫Øt ƒë·∫ßu ghi macro... (T√™n:", macroName..")")
    print("üì¢ G√µ 'stop' trong chat ƒë·ªÉ d·ª´ng")

    -- K·∫øt n·ªëi s·ª± ki·ªán ƒë·∫∑t th√°p
    local placeConnection = PlaceTowerRemote.OnClientEvent:Connect(function(time, towerType, position, rotation)
        if not recording then return end
        
        local entry = {
            TowerPlaceCost = player.leaderstats.Cash.Value,
            TowerPlaced = towerType,
            TowerVector = string.format("%.15g, %.15g, %.15g", position.X, position.Y, position.Z),
            Rotation = rotation,
            TowerA1 = tostring(time)
        }
        
        table.insert(macroData, entry)
        print("üìù ƒê√£ ghi: ƒê·∫∑t th√°p "..towerType)
    end)
    
    -- K·∫øt n·ªëi s·ª± ki·ªán n√¢ng c·∫•p th√°p
    local upgradeConnection = UpgradeRemote.OnClientEvent:Connect(function(hash, path, _)
        if not recording then return end
        
        -- L·∫•y th√¥ng tin th√°p t·ª´ hash
        local tower = TowerClass and TowerClass.GetTowers()[hash]
        local towerX = tower and GetTowerX(tower)
        
        if towerX then
            local entry = {
                UpgradeCost = player.leaderstats.Cash.Value,
                UpgradePath = path,
                TowerUpgraded = towerX
            }
            
            table.insert(macroData, entry)
            print("üìù ƒê√£ ghi: N√¢ng c·∫•p th√°p t·∫°i X = "..towerX)
        end
    end)
    
    -- K·∫øt n·ªëi s·ª± ki·ªán thay ƒë·ªïi target
    local targetConnection = TargetRemote.OnClientEvent:Connect(function(hash, queryType)
        if not recording then return end
        
        -- L·∫•y th√¥ng tin th√°p t·ª´ hash
        local tower = TowerClass and TowerClass.GetTowers()[hash]
        local towerX = tower and GetTowerX(tower)
        
        if towerX then
            local entry = {
                TowerTargetChange = towerX,
                TargetWanted = queryType,
                TargetChangedAt = os.time()
            }
            
            table.insert(macroData, entry)
            print("üìù ƒê√£ ghi: Thay ƒë·ªïi target th√°p t·∫°i X = "..towerX)
        end
    end)
    
    -- K·∫øt n·ªëi s·ª± ki·ªán b√°n th√°p
    local sellConnection = SellRemote.OnClientEvent:Connect(function(hash)
        if not recording then return end
        
        -- L·∫•y th√¥ng tin th√°p t·ª´ hash
        local tower = TowerClass and TowerClass.GetTowers()[hash]
        local towerX = tower and GetTowerX(tower)
        
        if towerX then
            local entry = {
                SellTower = towerX,
                SellTime = os.time()
            }
            
            table.insert(macroData, entry)
            print("üìù ƒê√£ ghi: B√°n th√°p t·∫°i X = "..towerX)
        end
    end)
    
    -- K·∫øt n·ªëi s·ª± ki·ªán chat
    local chatConnection
    if TextChatService then
        chatConnection = TextChatService.OnIncomingMessage:Connect(function(message)
            if message.TextSource and message.TextSource.UserId == player.UserId then
                if string.lower(message.Text) == "stop" then
                    SaveMacro()
                end
            end
        end)
    end
    
    -- D·ªçn d·∫πp khi d·ª´ng
    getgenv().StopMacroRecording = function()
        SaveMacro()
        placeConnection:Disconnect()
        upgradeConnection:Disconnect()
        targetConnection:Disconnect()
        sellConnection:Disconnect()
        if chatConnection then chatConnection:Disconnect() end
    end
end

-- T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu n·∫øu ·ªü ch·∫ø ƒë·ªô record
if getgenv().TDX_Config["Macros"] == "record" then
    StartRecording()
else
    print("‚úÖ Macro Recorder s·∫µn s√†ng (G√µ StartRecording() ƒë·ªÉ b·∫Øt ƒë·∫ßu ghi)")
endend
