-- SCR Recorder Ultimate - Fixed InvokeServer Error
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")

-- ƒê·∫£m b·∫£o load TowerClass
local TowerClass = require(Players.LocalPlayer.PlayerScripts.Client.GameClass.TowerClass)

-- C·∫•u h√¨nh
local SAVE_PATH = "tdx/macros/recording.json"
local AUTO_SAVE_INTERVAL = 5

-- Kh·ªüi t·∫°o th∆∞ m·ª•c
if not isfolder("tdx") then makefolder("tdx") end
if not isfolder("tdx/macros") then makefolder("tdx/macros") end

-- Bi·∫øn to√†n c·ª•c
local recorded = {}
local dirty = false

-- C√ÅC H√ÄM C·ª¶A B·∫†N - GI·ªÆ NGUY√äN --
local function formatPosition(pos)
    return string.format("%.2f, %.2f, %.2f", pos.X, pos.Y, pos.Z) -- Gi·∫£m ƒë·ªô ch√≠nh x√°c ƒë·ªÉ d·ªÖ ƒë·ªçc
end

local function GetTowerXFromHash(hash)
    local tower = TowerClass:GetTower(hash)
    if not tower or not tower.Character then return nil end
    
    local model = tower.Character:GetCharacterModel()
    local root = model and (model:FindFirstChild("HumanoidRootPart") or model.PrimaryPart)
    return root and tonumber(string.format("%.2f", root.Position.X))
end

local function GetTowerCostFromUI(name)
    local towersBar = PlayerGui.Interface.BottomBar.TowersBar
    for _, btn in ipairs(towersBar:GetChildren()) do
        if btn:IsA("ImageButton") and btn.Name == name then
            local costText = btn:FindFirstChild("CostFrame") and btn.CostFrame:FindFirstChild("CostText")
            if costText then
                return tonumber(costText.Text:gsub("[^%d]", ""))
            end
        end
    end
    return 0
end
-- K·∫æT TH√öC PH·∫¶N GI·ªÆ NGUY√äN --

-- H·ªá th·ªëng hook m·ªõi ƒë√£ fix l·ªói
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local PlaceTowerRemote = Remotes:WaitForChild("PlaceTower")

-- Fix l·ªói "InvokeServer is not a valid member"
if not PlaceTowerRemote then
    error("Kh√¥ng t√¨m th·∫•y RemoteFunction PlaceTower")
elseif PlaceTowerRemote.ClassName ~= "RemoteFunction" then
    error("PlaceTower ph·∫£i l√† RemoteFunction nh∆∞ng t√¨m th·∫•y: "..PlaceTowerRemote.ClassName)
end

-- Hook PlaceTower v·ªõi x·ª≠ l√Ω args ch√≠nh x√°c
local originalPlaceTower = PlaceTowerRemote.InvokeServer
PlaceTowerRemote.InvokeServer = function(self, ...)
    local args = {...}
    
    -- Debug in ra args nh·∫≠n ƒë∆∞·ª£c
    print("[DEBUG] PlaceTower args:", HttpService:JSONEncode(args))
    
    if #args >= 4 then
        local a1, towerName, position, rotation = args[1], args[2], args[3], args[4]
        
        table.insert(recorded, {
            _type = "PlaceTower",
            TowerPlaceCost = GetTowerCostFromUI(towerName),
            TowerPlaced = towerName,
            TowerVector = formatPosition(position),
            Rotation = rotation,
            RawA1 = a1,
            Timestamp = os.time(),
            _argsDebug = args -- L∆∞u c·∫£ args g·ªëc ƒë·ªÉ debug
        })
        dirty = true
    end
    
    -- G·ªçi h√†m g·ªëc v·ªõi args kh√¥ng thay ƒë·ªïi
    return originalPlaceTower(self, ...)
end

-- H·ªá th·ªëng t·ª± ƒë·ªông l∆∞u (gi·ªØ nguy√™n)
task.spawn(function()
    while true do
        task.wait(AUTO_SAVE_INTERVAL)
        if dirty then
            pcall(function()
                writefile(SAVE_PATH, HttpService:JSONEncode(recorded))
                dirty = false
                print("üîÑ ƒê√£ l∆∞u recording v√†o", SAVE_PATH)
            end)
        end
    end
end)

print("====================================")
print("‚úÖ SCR Recorder ULTIMATE - ƒê√É FIX L·ªñI INVOKESERVER")
print("üìÇ Output:", SAVE_PATH)
print("üîπ C·∫•u tr√∫c args PlaceTower:")
print("1. S·ªë (A1):", "953.54... (v·ªã tr√≠ X ho·∫∑c ID)")
print("2. T√™n tower:", "Cryo Blaster")
print("3. V·ªã tr√≠:", "Vector3")
print("4. Rotation:", "0")
print("====================================")
