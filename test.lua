-- Th√™m v√†o ph·∫ßn x·ª≠ l√Ω TowerUpgradeQueueUpdated
ReplicatedStorage.Remotes.TowerUpgradeQueueUpdated.OnClientEvent:Connect(function(data)
    if not data or not data[1] then return end
    
    local towerData = data[1]
    local hash = towerData.Hash
    local newLevels = towerData.LevelReplicationData
    
    -- Ki·ªÉm tra n√¢ng c·∫•p kh√¥ng kh·ªõp
    local function logMismatch(expectedPath, actualPath)
        local logEntry = string.format(
            "‚ö†Ô∏è C·∫¢NH B√ÅO: Y√™u c·∫ßu path %d nh∆∞ng server n√¢ng path %d | Tower %s | C·∫•p ƒë·ªô: %s\n",
            expectedPath,
            actualPath,
            tostring(hash),
            serialize(newLevels)
        )
        appendfile(fileName, logEntry)
        warn(logEntry)
    end

    if lastLevelData[hash] then
        -- T√¨m path n√†o th·ª±c s·ª± ƒë∆∞·ª£c n√¢ng c·∫•p
        local upgradedPaths = {}
        for path = 1, 2 do
            if newLevels[path] > (lastLevelData[hash][path] or 0) then
                table.insert(upgradedPaths, path)
            end
        end

        -- Ki·ªÉm tra v·ªõi y√™u c·∫ßu ƒëang ch·ªù
        for i, pending in ipairs(pendingUpgrades) do
            if pending.hash == hash then
                if #upgradedPaths == 0 then
                    -- Server kh√¥ng n√¢ng c·∫•p path n√†o
                    appendfile(fileName, string.format(
                        "‚ùå Y√™u c·∫ßu path %d nh∆∞ng KH√îNG path n√†o ƒë∆∞·ª£c n√¢ng | Tower %s\n",
                        pending.path,
                        tostring(hash)
                    ))
                elseif not table.find(upgradedPaths, pending.path) then
                    -- Path n√¢ng kh√¥ng kh·ªõp v·ªõi y√™u c·∫ßu
                    logMismatch(pending.path, upgradedPaths[1])
                    
                    -- V·∫´n ghi l·∫°i path th·ª±c t·∫ø ƒë∆∞·ª£c n√¢ng
                    for _, actualPath in ipairs(upgradedPaths) do
                        appendfile(fileName, string.format(
                            "TDX:upgradeTower(%s, %d, 1) -- Path %d: %d ‚Üí %d (TH·ª∞C T·∫æ)\n",
                            tostring(hash),
                            actualPath,
                            actualPath,
                            lastLevelData[hash][actualPath] or 0,
                            newLevels[actualPath]
                        ))
                    end
                else
                    -- Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng
                    appendfile(fileName, string.format(
                        "TDX:upgradeTower(%s, %d, 1) -- Path %d: %d ‚Üí %d (Chi ph√≠: $%d)\n",
                        tostring(hash),
                        pending.path,
                        pending.path,
                        lastLevelData[hash][pending.path] or 0,
                        newLevels[pending.path],
                        towerData.TotalCost or 0
                    ))
                end
                
                table.remove(pendingUpgrades, i)
                break
            end
        end

        -- C·∫≠p nh·∫≠t d·ªØ li·ªáu level m·ªõi nh·∫•t
        lastLevelData[hash] = newLevels
    else
        -- Tower m·ªõi ƒë∆∞·ª£c ph√°t hi·ªán
        lastLevelData[hash] = newLevels
        appendfile(fileName, string.format(
            "üÜï Tower m·ªõi: %s | C·∫•p ƒë·ªô kh·ªüi t·∫°o: Path1=%d, Path2=%d\n",
            tostring(hash),
            newLevels[1] or 0,
            newLevels[2] or 0
        ))
    end
end)