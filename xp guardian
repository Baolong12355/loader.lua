-- rebuild_layout.lua
local Players             = game:GetService("Players")
local ReplicatedStorage   = game:GetService("ReplicatedStorage")
local HttpService         = game:GetService("HttpService")
local player              = Players.LocalPlayer
local PlayerScripts       = player:WaitForChild("PlayerScripts")

local LIVE_FILE = "live_rebuild.txt"

-- Safe require TowerClass ------------------------------------------------------------
local TowerClass
do
    local ok,mod = pcall(require, PlayerScripts
                                :WaitForChild("Client")
                                :WaitForChild("GameClass")
                                :WaitForChild("TowerClass"))
    if ok then TowerClass = mod end
end

-- Lấy giá đặt tower (GUI live) -------------------------------------------------------
local function GetRealPlacementCost(towerName)
    local gui   = player:FindFirstChild("PlayerGui")
    if not gui then return 0 end

    local bottom = gui:FindFirstChildOfClass("ScreenGui")
        and gui:FindFirstChildOfClass("ScreenGui"):FindFirstChild("BottomBar")
    if not bottom then return 0 end

    local towersSpam = bottom:FindFirstChild("TowersBar")
    if not towersSpam then return 0 end

    for _,btn in pairs(towersSpam:GetChildren()) do
        if btn.Name == towerName then
            local costOb = btn:FindFirstChild("CostFrame") and btn.CostFrame:FindFirstChild("CostText")
            if costOb then
                local cleaned = tostring(costOb.Text):gsub("[^%d]", "")
                return tonumber(cleaned) or 0
            end
        end
    end
    return 0
end

-- Lấy vị trí/quay của tower ----------------------------------------------------------
local function GetTowerData(t)
    local m   = t.Character                      and t.Character:GetCharacterModel()
    local rp  = m                              and (m.PrimaryPart or m:FindFirstChild("HumanoidRootPart"))
    local pos = rp                             and rp.Position
    if not pos then return nil end

    local look = t.CFrame.LookVector
    local rot = 180 - math.deg(math.atan2(look.X, look.Z))

    return {
        pos  = {x = pos.X, y = pos.Y, z = pos.Z},
        rot  = rot,
        hash = t.Hash,
        name = tostring(t.Type)
    }
end

-- Save đội hình hiện tại + giá đặt thật + nâng cấp đúng level -----------------------
local function SaveLayout()
    if not TowerClass then return end

    local lines = {}
    local towers = TowerClass.GetTowers()

    for _,t in pairs(towers) do
        local info = GetTowerData(t)
        if info and t.HealthHandler and t.HealthHandler:Alive() then
            -- Place
            local cost = GetRealPlacementCost(info.name)
            lines[#lines+1] = HttpService:JSONEncode({
                SuperFunction = false,
                TowerPlaceCost = cost,
                TowerPlaced   = info.name,
                TowerVector   = table.concat({info.pos.x, info.pos.y, info.pos.z}, ", "),
                Rotation      = info.rot,
                TowerA1       = info.hash
            })

            -- Nâng cấp hiện tại
            local lv1 = t.LevelHandler:GetLevelOnPath(1)
            for i = 1, lv1 - 1 do
                lines[#lines+1] = HttpService:JSONEncode({
                    UpgradeCost = 0,
                    UpgradePath = 1,
                    TowerUpgraded = info.pos.x
                })
            end

            local lv2 = t.LevelHandler:GetLevelOnPath(2)
            for i = 1, lv2 - 1 do
                lines[#lines+1] = HttpService:JSONEncode({
                    UpgradeCost = 0,
                    UpgradePath = 2,
                    TowerUpgraded = info.pos.x
                })
            end
        end
    end

    writefile(LIVE_FILE, table.concat(lines, "\n"))
    print("✅ rebuild saved to", LIVE_FILE)
end

-- Cách gọi --------------------------------------------------------------------------
getgenv().rebuild = SaveLayout
print(">>> Gõ `rebuild()` trong console để snapshot bất cứ lúc nào.")
