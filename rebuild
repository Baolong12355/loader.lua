-- Formation Manager - Optimized for weak executors
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local formationFile = "formation.json"

-- Basic tower data storage
local towerData = {}
local isRecording = false

-- Simple tower info getter
local function GetBasicTowerInfo()
    local towers = {}
    local playerScripts = player:WaitForChild("PlayerScripts", 5)
    if not playerScripts then return towers end
    
    local success, towerClass = pcall(function()
        return require(playerScripts.Client.GameClass.TowerClass)
    end)
    
    if not success then return towers end
    
    for hash, tower in pairs(towerClass.GetTowers()) do
        local ok, info = pcall(function()
            local model = tower.Character:GetCharacterModel()
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            if not root then return nil end
            
            local pos = root.Position
            local name = tower.Name
            local health = tower.HealthHandler:GetHealth()
            
            if health <= 0 then return nil end
            
            -- Get upgrade levels
            local levels = {0, 0, 0}
            if tower.LevelHandler then
                for i = 1, 3 do
                    levels[i] = tower.LevelHandler:GetLevelOnPath(i)
                end
            end
            
            -- Get target type
            local target = 1
            if tower.TargetHandler then
                target = tower.TargetHandler:GetQueryType() or 1
            end
            
            return {
                x = math.floor(pos.X * 100) / 100,
                y = math.floor(pos.Y * 100) / 100,
                z = math.floor(pos.Z * 100) / 100,
                name = name,
                levels = levels,
                target = target
            }
        end)
        
        if ok and info then
            towers[#towers + 1] = info
        end
    end
    
    return towers
end

-- Save formation to file
local function SaveFormation()
    local towers = GetBasicTowerInfo()
    if #towers == 0 then return end
    
    local success = pcall(function()
        writefile(formationFile, HttpService:JSONEncode(towers))
    end)
    
    if success then
        print("Saved " .. #towers .. " towers")
    end
end

-- Load formation from file
local function LoadFormation()
    if not isfile(formationFile) then return {} end
    
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(formationFile))
    end)
    
    return success and data or {}
end

-- Simple tower placement
local function PlaceTower(name, pos)
    local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
    if not remotes then return false end
    
    local placeTower = remotes:FindFirstChild("PlaceTower")
    if not placeTower then return false end
    
    local success = pcall(function()
        placeTower:InvokeServer(1, name, Vector3.new(pos.x, pos.y, pos.z), 0)
    end)
    
    return success
end

-- Simple tower upgrade
local function UpgradeTower(x, path, count)
    local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
    if not remotes then return end
    
    local upgradeRemote = remotes:FindFirstChild("TowerUpgradeRequest")
    if not upgradeRemote then return end
    
    local towers = GetBasicTowerInfo()
    local targetTower = nil
    
    for _, tower in pairs(towers) do
        if math.abs(tower.x - x) < 0.5 then
            targetTower = tower
            break
        end
    end
    
    if not targetTower then return end
    
    -- Find tower hash
    local playerScripts = player:WaitForChild("PlayerScripts", 5)
    if not playerScripts then return end
    
    local success, towerClass = pcall(function()
        return require(playerScripts.Client.GameClass.TowerClass)
    end)
    
    if not success then return end
    
    for hash, tower in pairs(towerClass.GetTowers()) do
        local ok, pos = pcall(function()
            local model = tower.Character:GetCharacterModel()
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            return root and root.Position
        end)
        
        if ok and pos and math.abs(pos.X - x) < 0.5 then
            for i = 1, count do
                pcall(function()
                    upgradeRemote:FireServer(hash, path, 1)
                end)
                wait(0.1)
            end
            break
        end
    end
end

-- Change tower target
local function ChangeTarget(x, targetType)
    local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
    if not remotes then return end
    
    local changeQuery = remotes:FindFirstChild("ChangeQueryType")
    if not changeQuery then return end
    
    local playerScripts = player:WaitForChild("PlayerScripts", 5)
    if not playerScripts then return end
    
    local success, towerClass = pcall(function()
        return require(playerScripts.Client.GameClass.TowerClass)
    end)
    
    if not success then return end
    
    for hash, tower in pairs(towerClass.GetTowers()) do
        local ok, pos = pcall(function()
            local model = tower.Character:GetCharacterModel()
            local root = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
            return root and root.Position
        end)
        
        if ok and pos and math.abs(pos.X - x) < 0.5 then
            pcall(function()
                changeQuery:FireServer(hash, targetType)
            end)
            break
        end
    end
end

-- Rebuild formation
local function RebuildFormation()
    local formation = LoadFormation()
    if #formation == 0 then
        print("No formation data found")
        return
    end
    
    print("Rebuilding " .. #formation .. " towers")
    
    for _, tower in pairs(formation) do
        -- Place tower
        local placed = PlaceTower(tower.name, {x = tower.x, y = tower.y, z = tower.z})
        
        if placed then
            wait(0.5)
            
            -- Upgrade tower
            for path = 1, 3 do
                local targetLevel = tower.levels[path] or 0
                if targetLevel > 0 then
                    UpgradeTower(tower.x, path, targetLevel)
                    wait(0.2)
                end
            end
            
            -- Change target
            if tower.target and tower.target ~= 1 then
                ChangeTarget(tower.x, tower.target)
                wait(0.1)
            end
        end
        
        wait(0.1)
    end
    
    print("Formation rebuilt")
end

-- Auto-save on changes
local function StartAutoSave()
    if isRecording then return end
    isRecording = true
    
    local remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
    if not remotes then return end
    
    -- Listen for tower changes
    local connections = {}
    
    local factoryUpdate = remotes:FindFirstChild("TowerFactoryQueueUpdated")
    if factoryUpdate then
        connections[#connections + 1] = factoryUpdate.OnClientEvent:Connect(function()
            wait(0.1)
            SaveFormation()
        end)
    end
    
    local upgradeUpdate = remotes:FindFirstChild("TowerUpgradeQueueUpdated")
    if upgradeUpdate then
        connections[#connections + 1] = upgradeUpdate.OnClientEvent:Connect(function()
            wait(0.1)
            SaveFormation()
        end)
    end
    
    local queryUpdate = remotes:FindFirstChild("TowerQueryTypeIndexChanged")
    if queryUpdate then
        connections[#connections + 1] = queryUpdate.OnClientEvent:Connect(function()
            wait(0.1)
            SaveFormation()
        end)
    end
    
    -- Cleanup on player leaving
    connections[#connections + 1] = Players.PlayerRemoving:Connect(function(plr)
        if plr == player then
            for _, conn in pairs(connections) do
                conn:Disconnect()
            end
        end
    end)
end

-- Global functions
_G.rebuild = RebuildFormation
_G.save = SaveFormation
_G.clear = function()
    if isfile(formationFile) then
        delfile(formationFile)
        print("Formation cleared")
    end
end

-- Initialize
wait(1)
StartAutoSave()
SaveFormation()
print("Formation Manager loaded. Use rebuild(), save(), or clear()")
